"use strict";

var _reactHooks = require("@testing-library/react-hooks");

var _react = _interopRequireDefault(require("react"));

var _CustomDataProvider = require("../components/CustomDataProvider");

var _useDataMutation = require("./useDataMutation");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const customData = {
  answer: 42
};

const wrapper = ({
  children
}) => /*#__PURE__*/_react.default.createElement(_CustomDataProvider.CustomDataProvider, {
  data: customData
}, children);

const mutation = {
  type: 'create',
  resource: 'answer',
  data: {
    answer: 42
  }
};
describe('useDataMustation', () => {
  const originalError = console.error;
  afterEach(() => {
    console.error = originalError;
  });
  it('Should render without failing', async () => {
    let hookState;
    console.error = jest.fn();
    (0, _reactHooks.act)(() => {
      hookState = (0, _reactHooks.renderHook)(() => (0, _useDataMutation.useDataMutation)(mutation), {
        wrapper
      });
    });
    let [mutate, state] = hookState.result.current;
    expect(state).toMatchObject({
      called: false,
      loading: false
    });
    (0, _reactHooks.act)(() => {
      mutate();
    });
    mutate = hookState.result.current[0];
    state = hookState.result.current[1];
    expect(state).toMatchObject({
      called: true,
      loading: true
    });
  });
  it('Should run immediately with lazy: false', async () => {
    let hookState;
    console.error = jest.fn();
    (0, _reactHooks.act)(() => {
      hookState = (0, _reactHooks.renderHook)(() => (0, _useDataMutation.useDataMutation)(mutation, {
        lazy: false
      }), {
        wrapper
      });
    });
    let [, state] = hookState.result.current;
    expect(state).toMatchObject({
      called: true,
      loading: true
    });
    await hookState.waitForNextUpdate();
    state = hookState.result.current[1];
    expect(state).toMatchObject({
      loading: false,
      data: 42
    });
  });
});