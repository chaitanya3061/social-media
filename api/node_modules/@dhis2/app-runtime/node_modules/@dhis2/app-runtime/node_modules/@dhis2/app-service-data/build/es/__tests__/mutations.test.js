import { render, act, waitFor } from '@testing-library/react';
import React from 'react';
import { CustomDataProvider, DataMutation } from '../react';
const mockBackend = {
  target: jest.fn((type, query) => {
    expect(query.resource).toBe('target');
    expect(type).toBe('create');
    expect(query.data).toMatchObject({
      question: '?'
    });
    return Promise.resolve({
      answer: 42
    });
  })
};
describe('Test mutations', () => {
  it('Should call the mock callback', async () => {
    let doMutation;
    const renderFunction = jest.fn(([mutate, {
      called,
      loading,
      error,
      data
    }]) => {
      doMutation = mutate;
      if (!called) return 'uncalled';
      if (loading) return 'loading';
      if (error) return /*#__PURE__*/React.createElement("div", null, "error: ", error.message);
      if (data) return /*#__PURE__*/React.createElement("div", null, "data: ", data.answer);
    });
    const testMutation = {
      resource: 'target',
      type: 'create',
      data: {
        question: '?'
      }
    };
    const {
      getByText
    } = render( /*#__PURE__*/React.createElement(CustomDataProvider, {
      data: mockBackend
    }, /*#__PURE__*/React.createElement(DataMutation, {
      mutation: testMutation
    }, renderFunction)));
    expect(getByText(/uncalled/i)).not.toBeUndefined();
    expect(renderFunction).toHaveBeenCalledTimes(1);
    expect(mockBackend.target).not.toHaveBeenCalled();
    expect(renderFunction).toHaveBeenLastCalledWith([expect.any(Function), {
      called: false,
      loading: false,
      engine: expect.any(Object)
    }]);
    expect(doMutation).not.toBeUndefined();
    act(() => {
      doMutation && doMutation();
    });
    expect(renderFunction).toHaveBeenCalledTimes(2);
    expect(renderFunction).toHaveBeenLastCalledWith([doMutation, {
      called: true,
      loading: true,
      engine: expect.any(Object)
    }]);
    expect(mockBackend.target).toHaveBeenCalledTimes(1);
    await waitFor(() => getByText(/data: /i));
    expect(renderFunction).toHaveBeenCalledTimes(3);
    expect(renderFunction).toHaveBeenLastCalledWith([doMutation, {
      called: true,
      loading: false,
      data: {
        answer: 42
      },
      engine: expect.any(Object)
    }]);
    expect(getByText(/data: /i)).toHaveTextContent("data: 42");
  });
});