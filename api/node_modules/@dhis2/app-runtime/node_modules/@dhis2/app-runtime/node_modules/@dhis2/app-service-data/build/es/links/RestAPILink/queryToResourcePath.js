import { joinPath } from './path';
import { validateResourceQuery } from './validateQuery';

const encodeQueryParameter = param => {
  if (Array.isArray(param)) {
    return param.map(encodeQueryParameter).join(',');
  }

  if (typeof param === 'string') {
    return encodeURIComponent(param);
  }

  if (typeof param === 'number' || typeof param === 'boolean') {
    return String(param);
  }

  if (typeof param === 'object') {
    throw new Error('Object parameter mappings not yet implemented');
  }

  throw new Error('Unknown parameter type');
};

const queryParametersMapToArray = params => Object.keys(params).reduce((out, key) => {
  const value = params[key];

  if (key === 'filter' && Array.isArray(value)) {
    value.forEach(item => {
      out.push({
        key: 'filter',
        value: item
      });
    });
  } else if (params[key] !== null && params[key] !== undefined) {
    out.push({
      key,
      value: params[key]
    });
  }

  return out;
}, []);

const queryParametersToQueryString = params => {
  const expandedParams = queryParametersMapToArray(params);
  return expandedParams.map(({
    key,
    value
  }) => "".concat(encodeURIComponent(key), "=").concat(encodeQueryParameter(value))).join('&');
};

const actionPrefix = 'action::';

const isAction = resource => resource.startsWith(actionPrefix);

const makeActionPath = resource => joinPath('dhis-web-commons', "".concat(resource.substr(actionPrefix.length), ".action"));

export const queryToResourcePath = (apiPath, query, type) => {
  const {
    resource,
    id,
    params = {}
  } = query;
  const base = isAction(resource) ? makeActionPath(resource) : joinPath(apiPath, resource, id);
  validateResourceQuery(query, type);

  if (Object.keys(params).length) {
    return "".concat(base, "?").concat(queryParametersToQueryString(params));
  }

  return base;
};