"use strict";

var _reactHooks = require("@testing-library/react-hooks");

var _react = _interopRequireDefault(require("react"));

var _CustomDataProvider = require("../components/CustomDataProvider");

var _useDataQuery = require("./useDataQuery");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const customData = {
  answer: 42
};

const wrapper = ({
  children
}) => /*#__PURE__*/_react.default.createElement(_CustomDataProvider.CustomDataProvider, {
  data: customData
}, children);

const query = {
  x: {
    resource: 'answer'
  }
};
describe('useDataQuery', () => {
  const originalError = console.error;
  afterEach(() => {
    console.error = originalError;
  });
  it('Should render without failing', async () => {
    let hookState;
    console.error = jest.fn();
    (0, _reactHooks.act)(() => {
      hookState = (0, _reactHooks.renderHook)(() => (0, _useDataQuery.useDataQuery)(query), {
        wrapper
      });
    });
    expect(hookState.result.current).toMatchObject({
      loading: true
    });
  });
  it('Should lazily await a refetch call', async () => {
    let hookState;
    console.error = jest.fn();
    (0, _reactHooks.act)(() => {
      hookState = (0, _reactHooks.renderHook)(() => (0, _useDataQuery.useDataQuery)(query, {
        lazy: true
      }), {
        wrapper
      });
    });
    expect(hookState.result.current).toMatchObject({
      loading: false
    });
    (0, _reactHooks.act)(() => {
      hookState.result.current.refetch();
    });
    expect(hookState.result.current).toMatchObject({
      loading: true
    });
    await hookState.waitForNextUpdate();
    expect(hookState.result.current).toMatchObject({
      loading: false,
      data: {
        x: 42
      }
    });
  });
});