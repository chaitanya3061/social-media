import _JSXStyle from "styled-jsx/style";
import cx from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
import i18n from './locales/index.js';
import { PageControls } from './page-controls';
import { PageSelect } from './page-select';
import { PageSizeSelect } from './page-size-select.js';
import { PageSummary } from './page-summary.js';

const Pagination = ({
  className,
  dataTest,
  hidePageSizeSelect,
  hidePageSelect,
  page,
  pageCount,
  pageSize,
  total,
  pageSizes,
  onPageChange,
  onPageSizeChange,
  nextPageText,
  pageSelectText,
  pageSizeSelectText,
  pageSummaryText,
  previousPageText
}) => {
  return /*#__PURE__*/React.createElement("div", {
    "data-test": dataTest,
    className: "jsx-3647884394" + " " + (cx('container', className) || "")
  }, hidePageSizeSelect ? /*#__PURE__*/React.createElement("div", {
    className: "jsx-3647884394" + " " + "spacer"
  }) : /*#__PURE__*/React.createElement(PageSizeSelect, {
    dataTest: dataTest,
    pageSize: pageSize,
    pageSizes: pageSizes,
    onChange: onPageSizeChange,
    pageSizeSelectText: pageSizeSelectText
  }), /*#__PURE__*/React.createElement(PageSummary, {
    dataTest: dataTest,
    page: page,
    pageCount: pageCount,
    pageSize: pageSize,
    total: total,
    pageSummaryText: pageSummaryText
  }), /*#__PURE__*/React.createElement("div", {
    className: "jsx-3647884394" + " " + "page-navigation"
  }, !hidePageSelect && /*#__PURE__*/React.createElement(PageSelect, {
    dataTest: dataTest,
    pageSelectText: pageSelectText,
    page: page,
    pageCount: pageCount,
    onChange: onPageChange
  }), /*#__PURE__*/React.createElement(PageControls, {
    dataTest: dataTest,
    nextPageText: nextPageText,
    page: page,
    pageCount: pageCount,
    previousPageText: previousPageText,
    onClick: onPageChange
  })), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "3647884394"
  }, [".container.jsx-3647884394{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}", ".spacer.jsx-3647884394{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", ".page-navigation.jsx-3647884394{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;min-height:32px;}"]));
};

Pagination.defaultProps = {
  dataTest: 'dhis2-uiwidgets-pagination',
  pageSizes: ['5', '10', '20', '30', '40', '50', '75', '100'],
  nextPageText: () => i18n.t('Next'),
  pageSelectText: () => i18n.t('Page'),
  pageSizeSelectText: () => i18n.t('Items per page'),
  pageSummaryText: interpolationObject => i18n.t('Page {{page}} of {{pageCount}}, items {{firstItem}}-{{lastItem}} of {{total}}', interpolationObject),
  previousPageText: () => i18n.t('Previous')
};
Pagination.propTypes = {
  page: PropTypes.number.isRequired,
  pageCount: PropTypes.number.isRequired,
  pageSize: PropTypes.number.isRequired,
  total: PropTypes.number.isRequired,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  hidePageSelect: PropTypes.bool,
  hidePageSizeSelect: PropTypes.bool,
  nextPageText: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
  pageSelectText: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
  pageSizeSelectText: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
  pageSizes: PropTypes.arrayOf(PropTypes.string),
  pageSummaryText: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
  previousPageText: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
  onPageChange: PropTypes.func,
  onPageSizeChange: PropTypes.func
};
export { Pagination };