function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { shallow } from 'enzyme';
import React from 'react';
import * as mockPagers from '../__fixtures__/index.js';
import { PageControls } from '../page-controls.js';
describe('<PageControls />', () => {
  const mockOnClick = jest.fn();
  const props = {
    dataTest: 'test',
    onClick: mockOnClick,
    nextPageText: 'Next',
    previousPageText: 'Previous',
    ...mockPagers.atTenthPage
  };
  beforeEach(() => {
    mockOnClick.mockClear();
  });
  it('renders without errors', () => {
    shallow( /*#__PURE__*/React.createElement(PageControls, props));
  });
  it('disables no buttons on a page between first and last', () => {
    const wrapper = shallow( /*#__PURE__*/React.createElement(PageControls, props));
    expect(wrapper.find('.button-previous').getElement().props.disabled).toEqual(false);
    expect(wrapper.find('.button-next').getElement().props.disabled).toEqual(false);
  });
  it('disables the previous page button on the first page', () => {
    const wrapper = shallow( /*#__PURE__*/React.createElement(PageControls, _extends({}, props, mockPagers.atFirstPage)));
    expect(wrapper.find('.button-previous').getElement().props.disabled).toEqual(true);
    expect(wrapper.find('.button-next').getElement().props.disabled).toEqual(false);
  });
  it('disables the next page button on the last page', () => {
    const wrapper = shallow( /*#__PURE__*/React.createElement(PageControls, _extends({}, props, mockPagers.atLastPage)));
    expect(wrapper.find('.button-previous').getElement().props.disabled).toEqual(false);
    expect(wrapper.find('.button-next').getElement().props.disabled).toEqual(true);
  });
  it('calls the onClick handler with the value for the next page when next is clicked', () => {
    const wrapper = shallow( /*#__PURE__*/React.createElement(PageControls, props));
    wrapper.find('.button-next').simulate('click');
    expect(mockOnClick).toHaveBeenCalledTimes(1);
    expect(mockOnClick).toHaveBeenCalledWith(11);
  });
  it('calls the onClick handler with the value for the previous page when previous is clicked', () => {
    const wrapper = shallow( /*#__PURE__*/React.createElement(PageControls, props));
    wrapper.find('.button-previous').simulate('click');
    expect(mockOnClick).toHaveBeenCalledTimes(1);
    expect(mockOnClick).toHaveBeenCalledWith(9);
  });
});