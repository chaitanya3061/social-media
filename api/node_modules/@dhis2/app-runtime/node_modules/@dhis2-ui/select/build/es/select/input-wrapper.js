import _JSXStyle from "styled-jsx/style";
import propTypes from '@dhis2/prop-types';
import { colors, theme, sharedPropTypes } from '@dhis2/ui-constants';
import { IconChevronDown16 } from '@dhis2/ui-icons';
import cx from 'classnames';
import React from 'react';

const InputWrapper = ({
  dataTest,
  onToggle,
  children,
  tabIndex,
  error,
  warning,
  valid,
  disabled,
  dense,
  className,
  inputRef
}) => {
  const classNames = cx(className, 'root', {
    error,
    warning,
    valid,
    disabled,
    dense
  });
  return /*#__PURE__*/React.createElement("div", {
    onClick: onToggle,
    tabIndex: tabIndex,
    ref: inputRef,
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["840594049", [colors.grey500, theme.focus, theme.valid, theme.warning, theme.error, colors.grey100, colors.grey500, theme.disabled]]]) + " " + (classNames || "")
  }, /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["840594049", [colors.grey500, theme.focus, theme.valid, theme.warning, theme.error, colors.grey100, colors.grey500, theme.disabled]]]) + " " + "root-children"
  }, children), /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["840594049", [colors.grey500, theme.focus, theme.valid, theme.warning, theme.error, colors.grey100, colors.grey500, theme.disabled]]]) + " " + "root-right"
  }, /*#__PURE__*/React.createElement(IconChevronDown16, null)), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "840594049",
    dynamic: [colors.grey500, theme.focus, theme.valid, theme.warning, theme.error, colors.grey100, colors.grey500, theme.disabled]
  }, [`.root.__jsx-style-dynamic-selector{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background-color:white;border-radius:3px;border:1px solid ${colors.grey500};box-sizing:border-box;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:40px;padding:6px 12px;box-shadow:inset 0 1px 2px 0 rgba(48,54,60,0.1);}`, `.root.__jsx-style-dynamic-selector:focus,.root.__jsx-style-dynamic-selector:active{outline:none;box-shadow:0 0 0 3px ${theme.focus};}`, `.root.valid.__jsx-style-dynamic-selector{border-color:${theme.valid};}`, `.root.warning.__jsx-style-dynamic-selector{border-color:${theme.warning};}`, `.root.error.__jsx-style-dynamic-selector{border-color:${theme.error};}`, `.root.disabled.__jsx-style-dynamic-selector{background-color:${colors.grey100};border-color:${colors.grey500};color:${theme.disabled};cursor:not-allowed;}`, ".root.dense.__jsx-style-dynamic-selector{padding:4px 8px;min-height:32px;}", ".root-children.__jsx-style-dynamic-selector{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", ".root-right.__jsx-style-dynamic-selector{margin:4px 0px 0px 8px;}"]));
};

InputWrapper.defaultProps = {
  tabIndex: '0'
};
InputWrapper.propTypes = {
  dataTest: propTypes.string.isRequired,
  inputRef: propTypes.object.isRequired,
  tabIndex: propTypes.string.isRequired,
  onToggle: propTypes.func.isRequired,
  children: propTypes.element,
  className: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: sharedPropTypes.statusPropType,
  valid: sharedPropTypes.statusPropType,
  warning: sharedPropTypes.statusPropType
};
export { InputWrapper };