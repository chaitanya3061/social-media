"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultiSelect = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _propTypes = require("@dhis2/prop-types");

var _uiConstants = require("@dhis2/ui-constants");

var _uiIcons = require("@dhis2/ui-icons");

var _propTypes2 = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _index = require("../select/index.js");

var _filterableMenu = require("./filterable-menu.js");

var _input = require("./input.js");

var _menu = require("./menu.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const StatusIcon = ({
  error,
  warning,
  valid,
  defaultTo
}) => {
  if (error) {
    return /*#__PURE__*/_react.default.createElement(_uiIcons.IconErrorFilled24, {
      color: _uiConstants.theme.error
    });
  }

  if (warning) {
    return /*#__PURE__*/_react.default.createElement(_uiIcons.IconWarningFilled24, {
      color: _uiConstants.theme.warning
    });
  }

  if (valid) {
    return /*#__PURE__*/_react.default.createElement(_uiIcons.IconCheckmark24, {
      color: _uiConstants.theme.valid
    });
  }

  return defaultTo;
};

StatusIcon.defaultProps = {
  defaultTo: null
};
StatusIcon.propTypes = {
  className: _propTypes2.default.string,
  defaultTo: _propTypes2.default.element,
  error: _propTypes2.default.bool,
  info: _propTypes2.default.bool,
  loading: _propTypes2.default.bool,
  valid: _propTypes2.default.bool,
  warning: _propTypes2.default.bool
};

const MultiSelect = ({
  className,
  selected,
  tabIndex,
  maxHeight,
  inputMaxHeight,
  onChange,
  onFocus,
  onBlur,
  loading,
  error,
  warning,
  valid,
  disabled,
  children,
  clearable,
  clearText,
  filterable,
  filterPlaceholder,
  placeholder,
  prefix,
  empty,
  loadingText,
  noMatchText,
  initialFocus,
  dense,
  dataTest
}) => {
  // If the select is filterable, use a filterable menu
  const menu = filterable ? /*#__PURE__*/_react.default.createElement(_filterableMenu.FilterableMenu, {
    dataTest: dataTest,
    empty: empty,
    noMatchText: noMatchText,
    placeholder: filterPlaceholder
  }) : /*#__PURE__*/_react.default.createElement(_menu.Menu, {
    empty: empty,
    dataTest: dataTest
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    "data-test": dataTest,
    className: _style.default.dynamic([["196189569", [_uiConstants.spacers.dp8]]]) + " " + "root"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _style.default.dynamic([["196189569", [_uiConstants.spacers.dp8]]]) + " " + "root-input"
  }, /*#__PURE__*/_react.default.createElement(_index.Select, {
    className: className,
    selected: selected,
    input: /*#__PURE__*/_react.default.createElement(_input.Input, {
      clearable: clearable,
      clearText: clearText,
      dataTest: dataTest,
      placeholder: placeholder,
      prefix: prefix,
      inputMaxHeight: inputMaxHeight
    }),
    menu: menu,
    tabIndex: tabIndex,
    maxHeight: maxHeight,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    error: error,
    warning: warning,
    valid: valid,
    disabled: disabled,
    initialFocus: initialFocus,
    dense: dense
  }, children, loading && /*#__PURE__*/_react.default.createElement(_index.Loading, {
    message: loadingText,
    dataTest: `${dataTest}-loading`
  }))), /*#__PURE__*/_react.default.createElement(StatusIcon, {
    error: error,
    valid: valid,
    warning: warning
  }), /*#__PURE__*/_react.default.createElement(_style.default, {
    id: "196189569",
    dynamic: [_uiConstants.spacers.dp8]
  }, [".root.__jsx-style-dynamic-selector{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", `.root-input.__jsx-style-dynamic-selector{margin-right:${_uiConstants.spacers.dp8};-webkit-flex:1;-ms-flex:1;flex:1;}`]));
};

exports.MultiSelect = MultiSelect;
MultiSelect.defaultProps = {
  selected: [],
  dataTest: 'dhis2-uicore-multiselect'
};
MultiSelect.propTypes = {
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,

  /** Required if `clearable` prop is `true` */
  clearText: (0, _propTypes.requiredIf)(props => props.clearable, _propTypes2.default.string),

  /** Adds a 'clear' option to the menu */
  clearable: _propTypes2.default.bool,
  dataTest: _propTypes2.default.string,
  dense: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  empty: _propTypes2.default.node,
  error: _uiConstants.sharedPropTypes.statusPropType,
  filterPlaceholder: _propTypes2.default.string,

  /** Adds a 'filter' field to the menu */
  filterable: _propTypes2.default.bool,
  initialFocus: _propTypes2.default.bool,
  inputMaxHeight: _propTypes2.default.string,
  loading: _propTypes2.default.bool,
  loadingText: _propTypes2.default.string,
  maxHeight: _propTypes2.default.string,

  /** Required if `filterable` prop is `true` */
  noMatchText: (0, _propTypes.requiredIf)(props => props.filterable, _propTypes2.default.string),
  placeholder: _propTypes2.default.string,
  prefix: _propTypes2.default.string,
  selected: _propTypes2.default.arrayOf(_propTypes2.default.string),
  tabIndex: _propTypes2.default.string,
  valid: _uiConstants.sharedPropTypes.statusPropType,
  warning: _uiConstants.sharedPropTypes.statusPropType,
  onBlur: _propTypes2.default.func,
  onChange: _propTypes2.default.func,
  onFocus: _propTypes2.default.func
};