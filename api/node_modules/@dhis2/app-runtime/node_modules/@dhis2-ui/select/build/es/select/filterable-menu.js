function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import propTypes from '@dhis2/prop-types';
import React, { Component } from 'react';
import { FilterInput } from './filter-input.js';
import { NoMatch } from './no-match.js';
import { filterIgnored, checkIfValidOption } from './option-helpers.js';
export class FilterableMenu extends Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      filter: ''
    });

    _defineProperty(this, "onFilterChange", ({
      value
    }) => {
      this.setState({
        filter: value
      });
    });
  }

  render() {
    const {
      dataTest,
      options,
      onChange,
      selected,
      empty,
      handleClose,
      handleFocusInput,
      placeholder,
      noMatchText,
      Menu
    } = this.props;
    const {
      filter
    } = this.state;
    const menuProps = {
      onChange,
      selected,
      empty,
      handleClose,
      handleFocusInput,
      dataTest
    };
    const renderedOptions = filterIgnored(options); // If there are no options or there's no filter, just pass everything through

    if (React.Children.count(renderedOptions) === 0 || !filter) {
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FilterInput, {
        dataTest: `${dataTest}-filterinput`,
        placeholder: placeholder,
        value: filter,
        onChange: this.onFilterChange
      }), /*#__PURE__*/React.createElement(Menu, _extends({}, menuProps, {
        options: options
      })));
    }

    const filtered = React.Children.map(options, child => {
      const isValidOption = checkIfValidOption(child); // Filter it out if it's an invalid option

      if (!isValidOption) {
        return null;
      }

      const {
        label
      } = child.props; // Filter by label, because that's the part of an option that's displayed to the user

      const match = label.toLowerCase().includes(filter.toLowerCase());
      return match ? child : null;
    });
    const hasMatch = React.Children.count(filtered) > 0;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FilterInput, {
      dataTest: `${dataTest}-filterinput`,
      placeholder: placeholder,
      value: filter,
      onChange: this.onFilterChange
    }), hasMatch ? /*#__PURE__*/React.createElement(Menu, _extends({}, menuProps, {
      options: filtered
    })) : /*#__PURE__*/React.createElement(NoMatch, {
      message: noMatchText
    }));
  }

}
FilterableMenu.propTypes = {
  Menu: propTypes.elementType.isRequired,
  dataTest: propTypes.string.isRequired,
  noMatchText: propTypes.string.isRequired,
  selected: propTypes.oneOfType([propTypes.string, propTypes.arrayOf(propTypes.string)]).isRequired,
  empty: propTypes.node,
  handleClose: propTypes.func,
  handleFocusInput: propTypes.func,
  options: propTypes.node,
  placeholder: propTypes.string,
  onChange: propTypes.func
};