"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileInput = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _button = require("@dhis2-ui/button");

var _loader = require("@dhis2-ui/loader");

var _uiConstants = require("@dhis2/ui-constants");

var _uiIcons = require("@dhis2/ui-icons");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function Valid({
  className
}) {
  return /*#__PURE__*/_react.default.createElement(_uiIcons.IconCheckmark24, {
    color: _uiConstants.theme.valid,
    className: className
  });
}

Valid.propTypes = {
  className: _propTypes.default.string
};

function Warning({
  className
}) {
  return /*#__PURE__*/_react.default.createElement(_uiIcons.IconWarningFilled24, {
    color: _uiConstants.theme.warning,
    className: className
  });
}

Warning.propTypes = {
  className: _propTypes.default.string
};

function Error({
  className
}) {
  return /*#__PURE__*/_react.default.createElement(_uiIcons.IconErrorFilled24, {
    color: _uiConstants.theme.error,
    className: className
  });
}

Error.propTypes = {
  className: _propTypes.default.string
};

function Info({
  className
}) {
  return /*#__PURE__*/_react.default.createElement(_uiIcons.IconInfo24, {
    color: _uiConstants.theme.info,
    className: className
  });
}

Info.propTypes = {
  className: _propTypes.default.string
};

function Loading({
  className
}) {
  return /*#__PURE__*/_react.default.createElement(_loader.CircularLoader, {
    small: true,
    className: className
  });
}

Loading.propTypes = {
  className: _propTypes.default.string
};

const StatusIcon = ({
  error,
  warning,
  valid,
  loading,
  info,
  className,
  defaultTo
}) => {
  if (error) {
    return /*#__PURE__*/_react.default.createElement(Error, {
      className: className
    });
  }

  if (warning) {
    return /*#__PURE__*/_react.default.createElement(Warning, {
      className: className
    });
  }

  if (valid) {
    return /*#__PURE__*/_react.default.createElement(Valid, {
      className: className
    });
  }

  if (loading) {
    return /*#__PURE__*/_react.default.createElement(Loading, {
      className: className
    });
  }

  if (info) {
    return /*#__PURE__*/_react.default.createElement(Info, {
      className: className
    });
  }

  return defaultTo;
};

StatusIcon.defaultProps = {
  defaultTo: null
};
StatusIcon.propTypes = {
  className: _propTypes.default.string,
  defaultTo: _propTypes.default.element,
  error: _propTypes.default.bool,
  info: _propTypes.default.bool,
  loading: _propTypes.default.bool,
  valid: _propTypes.default.bool,
  warning: _propTypes.default.bool
};

function Upload({
  className
}) {
  return /*#__PURE__*/_react.default.createElement(_uiIcons.IconUpload24, {
    color: _uiConstants.colors.grey700,
    className: className
  });
}

Upload.propTypes = {
  className: _propTypes.default.string
};

class FileInput extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "ref", /*#__PURE__*/(0, _react.createRef)());

    _defineProperty(this, "handleClick", () => {
      this.ref.current.click();
    });

    _defineProperty(this, "handleChange", e => {
      if (this.props.onChange) {
        this.props.onChange(this.createHandlerPayload(), e);
      } // reset the file input so it won't prevent on-change
      // if the same file was added in a second attempt


      this.ref.current.value = '';
    });

    _defineProperty(this, "handleBlur", e => {
      if (this.props.onBlur) {
        this.props.onBlur(this.createHandlerPayload(), e);
      }
    });

    _defineProperty(this, "handleFocus", e => {
      if (this.props.onFocus) {
        this.props.onFocus(this.createHandlerPayload(), e);
      }
    });
  }

  createHandlerPayload() {
    return {
      files: this.ref.current.files,
      name: this.props.name
    };
  }

  render() {
    const {
      accept,
      buttonLabel,
      className,
      dataTest,
      disabled,
      error,
      initialFocus,
      large,
      multiple,
      name,
      small,
      tabIndex,
      valid,
      warning
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      "data-test": dataTest,
      className: _style.default.dynamic([["491492307", [_uiConstants.spacers.dp4, _uiConstants.spacers.dp8]]]) + " " + ((0, _classnames.default)('file-input', className) || "")
    }, /*#__PURE__*/_react.default.createElement("input", {
      id: name,
      name: name,
      type: "file",
      ref: this.ref,
      onChange: this.handleChange,
      accept: accept,
      multiple: multiple,
      disabled: disabled,
      className: _style.default.dynamic([["491492307", [_uiConstants.spacers.dp4, _uiConstants.spacers.dp8]]])
    }), /*#__PURE__*/_react.default.createElement(_button.Button, {
      disabled: disabled,
      icon: /*#__PURE__*/_react.default.createElement(Upload, null),
      initialFocus: initialFocus,
      large: large,
      onBlur: this.handleBlur,
      onClick: this.handleClick,
      onFocus: this.handleFocus,
      small: small,
      tabIndex: tabIndex,
      type: "button"
    }, buttonLabel), /*#__PURE__*/_react.default.createElement(StatusIcon, {
      error: error,
      valid: valid,
      warning: warning
    }), /*#__PURE__*/_react.default.createElement(_style.default, {
      id: "491492307",
      dynamic: [_uiConstants.spacers.dp4, _uiConstants.spacers.dp8]
    }, ["input.__jsx-style-dynamic-selector{display:none;}", `.file-input.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding-bottom:${_uiConstants.spacers.dp4};}`, `.file-input.__jsx-style-dynamic-selector>svg{margin-left:${_uiConstants.spacers.dp8};}`]));
  }

}

exports.FileInput = FileInput;
FileInput.defaultProps = {
  accept: '*',
  dataTest: 'dhis2-uicore-fileinput'
};
FileInput.propTypes = {
  /**
   * The `accept` attribute of the [native file input](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept)
   */
  accept: _propTypes.default.string,
  buttonLabel: _propTypes.default.string,
  className: _propTypes.default.string,
  dataTest: _propTypes.default.string,
  disabled: _propTypes.default.bool,

  /** Input status. Mutually exclusive with `warning` and `valid` */
  error: _uiConstants.sharedPropTypes.statusPropType,
  initialFocus: _propTypes.default.bool,

  /** Button size. Mutually exclusive with `small` */
  large: _uiConstants.sharedPropTypes.sizePropType,

  /**
   * The `multiple` attribute of the [native file input](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#multiple)
   */
  multiple: _propTypes.default.bool,
  name: _propTypes.default.string,

  /** Button size. Mutually exclusive with `large` */
  small: _uiConstants.sharedPropTypes.sizePropType,
  tabIndex: _propTypes.default.string,

  /** Input status. Mutually exclusive with `warning` and `error` */
  valid: _uiConstants.sharedPropTypes.statusPropType,

  /** Input status. Mutually exclusive with `valid` and `error` */
  warning: _uiConstants.sharedPropTypes.statusPropType,

  /** Called with signature `(object, event)` */
  onBlur: _propTypes.default.func,

  /** Called with signature `(object, event)` */
  onChange: _propTypes.default.func,

  /** Called with signature `(object, event)` */
  onFocus: _propTypes.default.func
};