import _JSXStyle from "styled-jsx/style";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { Button } from '@dhis2-ui/button';
import { CircularLoader } from '@dhis2-ui/loader';
import { colors, theme, spacers, sharedPropTypes } from '@dhis2/ui-constants';
import { IconErrorFilled24, IconCheckmark24, IconInfo24, IconUpload24, IconWarningFilled24 } from '@dhis2/ui-icons';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { createRef, Component } from 'react';

function Valid({
  className
}) {
  return /*#__PURE__*/React.createElement(IconCheckmark24, {
    color: theme.valid,
    className: className
  });
}

Valid.propTypes = {
  className: PropTypes.string
};

function Warning({
  className
}) {
  return /*#__PURE__*/React.createElement(IconWarningFilled24, {
    color: theme.warning,
    className: className
  });
}

Warning.propTypes = {
  className: PropTypes.string
};

function Error({
  className
}) {
  return /*#__PURE__*/React.createElement(IconErrorFilled24, {
    color: theme.error,
    className: className
  });
}

Error.propTypes = {
  className: PropTypes.string
};

function Info({
  className
}) {
  return /*#__PURE__*/React.createElement(IconInfo24, {
    color: theme.info,
    className: className
  });
}

Info.propTypes = {
  className: PropTypes.string
};

function Loading({
  className
}) {
  return /*#__PURE__*/React.createElement(CircularLoader, {
    small: true,
    className: className
  });
}

Loading.propTypes = {
  className: PropTypes.string
};

const StatusIcon = ({
  error,
  warning,
  valid,
  loading,
  info,
  className,
  defaultTo
}) => {
  if (error) {
    return /*#__PURE__*/React.createElement(Error, {
      className: className
    });
  }

  if (warning) {
    return /*#__PURE__*/React.createElement(Warning, {
      className: className
    });
  }

  if (valid) {
    return /*#__PURE__*/React.createElement(Valid, {
      className: className
    });
  }

  if (loading) {
    return /*#__PURE__*/React.createElement(Loading, {
      className: className
    });
  }

  if (info) {
    return /*#__PURE__*/React.createElement(Info, {
      className: className
    });
  }

  return defaultTo;
};

StatusIcon.defaultProps = {
  defaultTo: null
};
StatusIcon.propTypes = {
  className: PropTypes.string,
  defaultTo: PropTypes.element,
  error: PropTypes.bool,
  info: PropTypes.bool,
  loading: PropTypes.bool,
  valid: PropTypes.bool,
  warning: PropTypes.bool
};

function Upload({
  className
}) {
  return /*#__PURE__*/React.createElement(IconUpload24, {
    color: colors.grey700,
    className: className
  });
}

Upload.propTypes = {
  className: PropTypes.string
};

class FileInput extends Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "ref", /*#__PURE__*/createRef());

    _defineProperty(this, "handleClick", () => {
      this.ref.current.click();
    });

    _defineProperty(this, "handleChange", e => {
      if (this.props.onChange) {
        this.props.onChange(this.createHandlerPayload(), e);
      } // reset the file input so it won't prevent on-change
      // if the same file was added in a second attempt


      this.ref.current.value = '';
    });

    _defineProperty(this, "handleBlur", e => {
      if (this.props.onBlur) {
        this.props.onBlur(this.createHandlerPayload(), e);
      }
    });

    _defineProperty(this, "handleFocus", e => {
      if (this.props.onFocus) {
        this.props.onFocus(this.createHandlerPayload(), e);
      }
    });
  }

  createHandlerPayload() {
    return {
      files: this.ref.current.files,
      name: this.props.name
    };
  }

  render() {
    const {
      accept,
      buttonLabel,
      className,
      dataTest,
      disabled,
      error,
      initialFocus,
      large,
      multiple,
      name,
      small,
      tabIndex,
      valid,
      warning
    } = this.props;
    return /*#__PURE__*/React.createElement("div", {
      "data-test": dataTest,
      className: _JSXStyle.dynamic([["491492307", [spacers.dp4, spacers.dp8]]]) + " " + (cx('file-input', className) || "")
    }, /*#__PURE__*/React.createElement("input", {
      id: name,
      name: name,
      type: "file",
      ref: this.ref,
      onChange: this.handleChange,
      accept: accept,
      multiple: multiple,
      disabled: disabled,
      className: _JSXStyle.dynamic([["491492307", [spacers.dp4, spacers.dp8]]])
    }), /*#__PURE__*/React.createElement(Button, {
      disabled: disabled,
      icon: /*#__PURE__*/React.createElement(Upload, null),
      initialFocus: initialFocus,
      large: large,
      onBlur: this.handleBlur,
      onClick: this.handleClick,
      onFocus: this.handleFocus,
      small: small,
      tabIndex: tabIndex,
      type: "button"
    }, buttonLabel), /*#__PURE__*/React.createElement(StatusIcon, {
      error: error,
      valid: valid,
      warning: warning
    }), /*#__PURE__*/React.createElement(_JSXStyle, {
      id: "491492307",
      dynamic: [spacers.dp4, spacers.dp8]
    }, ["input.__jsx-style-dynamic-selector{display:none;}", `.file-input.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding-bottom:${spacers.dp4};}`, `.file-input.__jsx-style-dynamic-selector>svg{margin-left:${spacers.dp8};}`]));
  }

}

FileInput.defaultProps = {
  accept: '*',
  dataTest: 'dhis2-uicore-fileinput'
};
FileInput.propTypes = {
  /**
   * The `accept` attribute of the [native file input](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept)
   */
  accept: PropTypes.string,
  buttonLabel: PropTypes.string,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  disabled: PropTypes.bool,

  /** Input status. Mutually exclusive with `warning` and `valid` */
  error: sharedPropTypes.statusPropType,
  initialFocus: PropTypes.bool,

  /** Button size. Mutually exclusive with `small` */
  large: sharedPropTypes.sizePropType,

  /**
   * The `multiple` attribute of the [native file input](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#multiple)
   */
  multiple: PropTypes.bool,
  name: PropTypes.string,

  /** Button size. Mutually exclusive with `large` */
  small: sharedPropTypes.sizePropType,
  tabIndex: PropTypes.string,

  /** Input status. Mutually exclusive with `warning` and `error` */
  valid: sharedPropTypes.statusPropType,

  /** Input status. Mutually exclusive with `valid` and `error` */
  warning: sharedPropTypes.statusPropType,

  /** Called with signature `(object, event)` */
  onBlur: PropTypes.func,

  /** Called with signature `(object, event)` */
  onChange: PropTypes.func,

  /** Called with signature `(object, event)` */
  onFocus: PropTypes.func
};
export { FileInput };