import _JSXStyle from "styled-jsx/style";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { CircularLoader } from '@dhis2-ui/loader';
import { theme, colors, spacers, sharedPropTypes } from '@dhis2/ui-constants';
import { IconErrorFilled24, IconWarningFilled24, IconCheckmark24 } from '@dhis2/ui-icons';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { Component } from 'react';

const StatusIcon = ({
  error,
  warning,
  valid,
  loading,
  className,
  defaultTo
}) => {
  if (error) {
    return /*#__PURE__*/React.createElement(IconErrorFilled24, {
      color: theme.error
    });
  }

  if (warning) {
    return /*#__PURE__*/React.createElement(IconWarningFilled24, {
      color: theme.warning
    });
  }

  if (valid) {
    return /*#__PURE__*/React.createElement(IconCheckmark24, {
      color: theme.valid
    });
  }

  if (loading) {
    return /*#__PURE__*/React.createElement(CircularLoader, {
      small: true,
      className: className
    });
  }

  return defaultTo;
};

StatusIcon.defaultProps = {
  defaultTo: null
};
StatusIcon.propTypes = {
  className: PropTypes.string,
  defaultTo: PropTypes.element,
  error: PropTypes.bool,
  loading: PropTypes.bool,
  valid: PropTypes.bool,
  warning: PropTypes.bool
};
const styles = [".input.jsx-2133963083{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}", `input.jsx-2133963083{box-sizing:border-box;font-size:14px;line-height:16px;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;color:${colors.grey900};background-color:white;padding:12px 11px 10px;outline:0;border:1px solid ${colors.grey500};border-radius:3px;box-shadow:inset 0 1px 2px 0 rgba(48,54,60,0.1);text-overflow:ellipsis;}`, "input.dense.jsx-2133963083{padding:8px 11px 6px;}", `input.jsx-2133963083:focus{outline:none;box-shadow:0 0 0 3px ${theme.focus};}`, `input.warning.jsx-2133963083{border-color:${theme.warning};}`, `input.error.jsx-2133963083{border-color:${theme.error};}`, `input.read-only.jsx-2133963083{background-color:${colors.grey100};border-color:${colors.grey500};cursor:text;}`, `input.disabled.jsx-2133963083{background-color:${colors.grey100};border-color:${colors.grey500};color:${theme.disabled};cursor:not-allowed;}`, `.status-icon.jsx-2133963083{-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;-webkit-box-flex:0;-webkit-flex-grow:0;-ms-flex-positive:0;flex-grow:0;margin-left:${spacers.dp8};}`];
styles.__hash = "2133963083";
export class Input extends Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "inputRef", /*#__PURE__*/React.createRef());

    _defineProperty(this, "handleChange", e => {
      if (this.props.onChange) {
        this.props.onChange(this.createHandlerPayload(e), e);
      }
    });

    _defineProperty(this, "handleBlur", e => {
      if (this.props.onBlur) {
        this.props.onBlur(this.createHandlerPayload(e), e);
      }
    });

    _defineProperty(this, "handleFocus", e => {
      if (this.props.onFocus) {
        this.props.onFocus(this.createHandlerPayload(e), e);
      }
    });
  }

  componentDidMount() {
    if (this.props.initialFocus) {
      this.inputRef.current.focus();
    }
  }

  createHandlerPayload(e) {
    return {
      value: e.target.value,
      name: this.props.name
    };
  }

  render() {
    const {
      role,
      className,
      type,
      dense,
      disabled,
      readOnly,
      placeholder,
      name,
      valid,
      error,
      warning,
      loading,
      value,
      tabIndex,
      max,
      min,
      step,
      dataTest
    } = this.props;
    return /*#__PURE__*/React.createElement("div", {
      "data-test": dataTest,
      className: "jsx-3353877153 " + `jsx-${styles.__hash}` + " " + (cx('input', className) || "")
    }, /*#__PURE__*/React.createElement("input", {
      role: role,
      id: name,
      name: name,
      placeholder: placeholder,
      ref: this.inputRef,
      type: type,
      value: value,
      max: max,
      min: min,
      step: step,
      disabled: disabled,
      readOnly: readOnly,
      tabIndex: tabIndex,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      onChange: this.handleChange,
      className: "jsx-3353877153 " + `jsx-${styles.__hash}` + " " + (cx({
        dense,
        disabled,
        error,
        valid,
        warning,
        'read-only': readOnly
      }) || "")
    }), /*#__PURE__*/React.createElement("div", {
      className: "jsx-3353877153 " + `jsx-${styles.__hash}` + " " + "status-icon"
    }, /*#__PURE__*/React.createElement(StatusIcon, {
      error: error,
      valid: valid,
      loading: loading,
      warning: warning
    })), /*#__PURE__*/React.createElement(_JSXStyle, {
      id: styles.__hash
    }, styles), /*#__PURE__*/React.createElement(_JSXStyle, {
      id: "3353877153"
    }, ["input.jsx-3353877153{width:100%;}"]));
  }

}
Input.defaultProps = {
  type: 'text',
  dataTest: 'dhis2-uicore-input'
};
Input.propTypes = {
  className: PropTypes.string,
  dataTest: PropTypes.string,

  /** Makes the input smaller */
  dense: PropTypes.bool,

  /** Disables the input */
  disabled: PropTypes.bool,

  /** Applies 'error' appearance for validation feedback. Mutually exclusive with `valid` and `warning` props */
  error: sharedPropTypes.statusPropType,

  /** The input grabs initial focus on the page */
  initialFocus: PropTypes.bool,

  /** Adds a loading indicator beside the input */
  loading: PropTypes.bool,

  /** The [native `max` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefmax), for use when `type` is `'number'` */
  max: PropTypes.string,

  /** The [native `min` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefmin), for use when `type` is `'number'` */
  min: PropTypes.string,

  /** Name associated with the input. Passed to event handler callbacks in object */
  name: PropTypes.string,

  /** Placeholder text for the input */
  placeholder: PropTypes.string,

  /** Makes the input read-only */
  readOnly: PropTypes.bool,

  /** Sets a role attribute on the input */
  role: PropTypes.string,

  /** The [native `step` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefstep), for use when `type` is `'number'` */
  step: PropTypes.string,
  tabIndex: PropTypes.string,

  /** The native input `type` attribute */
  type: PropTypes.oneOf(['text', 'number', 'password', 'email', 'url', 'tel', 'date', 'datetime', 'datetime-local', 'month', 'week', 'time', 'search']),

  /** Applies 'valid' appearance for validation feedback. Mutually exclusive with `error` and `warning` props */
  valid: sharedPropTypes.statusPropType,

  /** Value in the input. Can be used to control the component (recommended). Passed to event handler callbacks in object */
  value: PropTypes.string,

  /** Applies 'warning' appearance for validation feedback. Mutually exclusive with `valid` and `error` props */
  warning: sharedPropTypes.statusPropType,

  /** Called with signature `({ name: string, value: string }, event)` */
  onBlur: PropTypes.func,

  /** Called with signature `({ name: string, value: string }, event)` */
  onChange: PropTypes.func,

  /** Called with signature `({ name: string, value: string }, event)` */
  onFocus: PropTypes.func
};