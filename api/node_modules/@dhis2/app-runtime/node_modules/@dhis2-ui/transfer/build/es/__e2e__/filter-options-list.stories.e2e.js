import React from 'react';
import { Transfer } from '../transfer.js';
import { options } from './common/options.js';
import { statefulDecorator } from './common/stateful-decorator.js';
export default {
  title: 'Transfer filtering',
  decorators: [statefulDecorator()]
};
export const EmptyResult = (_, {
  selected,
  onChange
}) => /*#__PURE__*/React.createElement(Transfer, {
  filterable: true,
  initialSearchTerm: "Foobarbaz",
  selected: selected,
  onChange: onChange,
  sourceEmptyPlaceholder: /*#__PURE__*/React.createElement("span", {
    "data-test": "no-results"
  }, "No results"),
  options: options
});
export const SomeResults = (_, {
  selected,
  onChange
}) => /*#__PURE__*/React.createElement(Transfer, {
  selected: selected,
  filterable: true,
  initialSearchTerm: "ANC",
  onChange: onChange,
  options: options
});
export const UppercaseSearch = (_, {
  selected,
  onChange
}) => /*#__PURE__*/React.createElement(Transfer, {
  selected: selected,
  filterable: true,
  initialSearchTerm: "ANC",
  onChange: onChange,
  options: options
});
export const LowercaseSearch = (_, {
  selected,
  onChange
}) => /*#__PURE__*/React.createElement(Transfer, {
  filterable: true,
  initialSearchTerm: "anc",
  selected: selected,
  onChange: onChange,
  options: options
});
export const AncCustomFilter = (_, {
  selected,
  onChange
}) => /*#__PURE__*/React.createElement(Transfer, {
  filterable: true,
  selected: selected,
  onChange: onChange,
  filterCallback: (options, filter) => options.filter(({
    label
  }) => label.match(`(^| )ANC .*${filter}`)),
  options: options
});

window.customFilterCallback = (options, filter) => {
  return options.filter(({
    label
  }) => label.indexOf(filter) !== -1);
};

window.Cypress && window.Cypress.cy.spy(window, 'customFilterCallback');
export const ControlledFilter = (_, {
  filter,
  onChange,
  onFilterChange,
  selected
}) => /*#__PURE__*/React.createElement(Transfer, {
  selected: selected,
  onChange: onChange,
  filterable: true,
  filterCallback: window.customFilterCallback,
  searchTerm: filter,
  onFilterChange: onFilterChange,
  options: options
});
ControlledFilter.story = {
  decorators: [statefulDecorator()]
};