"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OrganisationUnitNode = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _loader = require("@dhis2-ui/loader");

var _node = require("@dhis2-ui/node");

var _propTypes = _interopRequireDefault(require("@dhis2/prop-types"));

var _react = _interopRequireDefault(require("react"));

var _index = _interopRequireDefault(require("../locales/index.js"));

var _propTypes2 = require("../prop-types.js");

var _computeChildNodes = require("./compute-child-nodes.js");

var _errorMessage = require("./error-message.js");

var _hasDescendantSelectedPaths = require("./has-descendant-selected-paths.js");

var _index2 = require("./label/index.js");

var _useOpenState = require("./use-open-state.js");

var _index3 = require("./use-org-data/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const loadingSpinnerStyles = {
  styles: /*#__PURE__*/_react.default.createElement(_style.default, {
    id: "358163430"
  }, [".extrasmall.jsx-358163430{display:block;margin:3px 0;}"]),
  className: "jsx-358163430"
};

const LoadingSpinner = () => /*#__PURE__*/_react.default.createElement("div", {
  className: "jsx-2503342345"
}, /*#__PURE__*/_react.default.createElement(_loader.CircularLoader, {
  extrasmall: true,
  className: loadingSpinnerStyles.className
}), /*#__PURE__*/_react.default.createElement("style", null, loadingSpinnerStyles.styles), /*#__PURE__*/_react.default.createElement(_style.default, {
  id: "2503342345"
}, ["div.jsx-2503342345{width:24px;}"]));

const OrganisationUnitNode = ({
  autoExpandLoadingError,
  dataTest,
  disableSelection,
  displayName,
  expanded,
  highlighted,
  id,
  isUserDataViewFallback,
  path,
  renderNodeLabel,
  selected,
  singleSelection,
  filter,
  suppressAlphabeticalSorting,
  onChange,
  onChildrenLoaded,
  onCollapse,
  onExpand
}) => {
  const {
    loading,
    error,
    data
  } = (0, _index3.useOrgData)(id, {
    isUserDataViewFallback,
    suppressAlphabeticalSorting,
    displayName,
    onComplete: onChildrenLoaded
  });
  const childNodes = !loading && !error ? (0, _computeChildNodes.computeChildNodes)(data, filter) : [];
  const hasChildren = !!childNodes.length;
  const hasSelectedDescendants = (0, _hasDescendantSelectedPaths.hasDescendantSelectedPaths)(path, selected);
  const isHighlighted = highlighted.includes(path);
  const {
    open,
    onToggleOpen
  } = (0, _useOpenState.useOpenState)({
    autoExpandLoadingError,
    errorMessage: error && error.toString(),
    path,
    expanded,
    onExpand,
    onCollapse
  });
  const isSelected = selected.includes(path);
  const labelContent = renderNodeLabel({
    disableSelection,
    hasChildren,
    hasSelectedDescendants,
    loading,
    error,
    selected,
    open,
    path,
    singleSelection,
    node: data,
    label: data.displayName,
    checked: isSelected,
    highlighted: isHighlighted
  });

  const label = /*#__PURE__*/_react.default.createElement(_index2.Label, {
    node: data,
    open: open,
    loading: loading,
    checked: isSelected,
    onChange: onChange,
    dataTest: `${dataTest}-label`,
    selected: selected,
    hasChildren: hasChildren,
    highlighted: isHighlighted,
    onToggleOpen: onToggleOpen,
    disableSelection: disableSelection,
    singleSelection: singleSelection,
    hasSelectedDescendants: hasSelectedDescendants
  }, labelContent);
  /**
   * No children means no arrow, therefore we have to provide something.
   * While "loading" is true, "hasChildren" is false
   * There are some possible children variants as content of this node:
   *
   * 1. Nothing; There are no children
   * 2. Placeholder: There are children, but the Node is closed (show arrow)
   * 3. Error: There are children and loading information somehow failed
   * 4. Child nodes: There are children and the node is open
   */


  const showPlaceholder = hasChildren && !open && !error;
  const showChildNodes = hasChildren && open && !error;
  return /*#__PURE__*/_react.default.createElement(_node.Node, {
    dataTest: `${dataTest}-node`,
    open: open,
    onOpen: onToggleOpen,
    onClose: onToggleOpen,
    component: label,
    icon: loading && /*#__PURE__*/_react.default.createElement(LoadingSpinner, null)
  }, error && /*#__PURE__*/_react.default.createElement(_errorMessage.ErrorMessage, {
    dataTest: dataTest
  }, _index.default.t('Could not load children')), showPlaceholder && /*#__PURE__*/_react.default.createElement("span", {
    "data-test": `${dataTest}-placeholder`
  }), showChildNodes && childNodes.map(child => {
    const childPath = `${path}/${child.id}`;
    const grandChildNodes = (0, _computeChildNodes.computeChildNodes)(child, filter);
    return /*#__PURE__*/_react.default.createElement(OrganisationUnitNode, {
      key: childPath,
      autoExpandLoadingError: autoExpandLoadingError,
      childNodes: grandChildNodes,
      dataTest: dataTest,
      disableSelection: disableSelection,
      displayName: child.displayName,
      expanded: expanded,
      filter: filter,
      highlighted: highlighted,
      id: child.id,
      isUserDataViewFallback: isUserDataViewFallback,
      suppressAlphabeticalSorting: suppressAlphabeticalSorting,
      path: childPath,
      renderNodeLabel: renderNodeLabel,
      selected: selected,
      singleSelection: singleSelection,
      onChange: onChange,
      onChildrenLoaded: onChildrenLoaded,
      onCollapse: onCollapse,
      onExpand: onExpand
    });
  }));
};

exports.OrganisationUnitNode = OrganisationUnitNode;
OrganisationUnitNode.propTypes = {
  dataTest: _propTypes.default.string.isRequired,
  id: _propTypes.default.string.isRequired,
  renderNodeLabel: _propTypes.default.func.isRequired,
  onChange: _propTypes.default.func.isRequired,
  autoExpandLoadingError: _propTypes.default.bool,
  disableSelection: _propTypes.default.bool,
  displayName: _propTypes.default.string,
  expanded: _propTypes.default.arrayOf(_propTypes2.orgUnitPathPropType),
  filter: _propTypes.default.arrayOf(_propTypes2.orgUnitPathPropType),
  highlighted: _propTypes.default.arrayOf(_propTypes2.orgUnitPathPropType),
  isUserDataViewFallback: _propTypes.default.bool,
  path: _propTypes2.orgUnitPathPropType,
  selected: _propTypes.default.arrayOf(_propTypes2.orgUnitPathPropType),
  singleSelection: _propTypes.default.bool,
  suppressAlphabeticalSorting: _propTypes.default.bool,
  onChildrenLoaded: _propTypes.default.func,
  onCollapse: _propTypes.default.func,
  onExpand: _propTypes.default.func
};