"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StatefulMultiSelectionWrapper = exports.dataProviderData = exports.delayResponse = exports.namespace = void 0;

var _propTypes = _interopRequireDefault(require("@dhis2/prop-types"));

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const namespace = 'OrganisationUnitTree';
exports.namespace = namespace;

const delayResponse = (delay, response) => () => new Promise(resolve => setTimeout(() => resolve(response), delay));

exports.delayResponse = delayResponse;
const dataProviderData = {
  organisationUnits: (type, {
    id
  }) => {
    if (id === 'A0000000000') {
      return {
        id: 'A0000000000',
        path: '/A0000000000',
        displayName: 'Org Unit 1',
        children: [{
          id: 'A0000000001',
          path: '/A0000000000/A0000000001',
          children: [{
            id: 'A0000000003'
          }, {
            id: 'A0000000004'
          }],
          displayName: 'Org Unit 2'
        }, {
          id: 'A0000000002',
          path: '/A0000000000/A0000000002',
          children: [],
          displayName: 'Org Unit 3'
        }, {
          id: 'A0000000006',
          path: '/A0000000000/A0000000006',
          children: [],
          displayName: 'Org Unit 7'
        }]
      };
    }

    if (id === 'A0000000001') {
      return {
        id: 'A0000000001',
        path: '/A0000000000/A0000000001',
        displayName: 'Org Unit 2',
        children: [{
          id: 'A0000000003',
          path: '/A0000000000/A0000000001/A0000000003',
          children: [],
          displayName: 'Org Unit 4'
        }, {
          id: 'A0000000004',
          path: '/A0000000000/A0000000001/A0000000004',
          children: [],
          displayName: 'Org Unit 5'
        }]
      };
    }

    if (id === 'A0000000002') {
      return {
        displayName: 'Org Unit 3',
        id: 'A0000000002',
        path: '/A0000000000/A0000000002',
        children: []
      };
    }

    if (id === 'A0000000003') {
      return {
        displayName: 'Org Unit 4',
        id: 'A0000000003',
        path: '/A0000000000/A0000000001/A0000000003',
        children: []
      };
    }

    if (id === 'A0000000004') {
      return {
        displayName: 'Org Unit 5',
        id: 'A0000000004',
        path: '/A0000000000/A0000000001/A0000000004',
        children: []
      };
    }

    if (id === 'A0000000006') {
      return {
        displayName: 'Org Unit 7',
        id: 'A0000000006',
        path: '/A0000000000/A0000000006',
        children: []
      };
    }

    return Promise.reject(`No org unit with id "${id}"`);
  }
};
exports.dataProviderData = dataProviderData;

const onChange = (selected, setSelected) => ({
  selected: newSelected
}) => {
  setSelected(newSelected);
  return newSelected;
};

const StatefulMultiSelectionWrapper = ({
  children,
  onSelectionChange
}) => {
  const [selected, setSelected] = (0, _react.useState)([]);
  const onChangeHandler = onChange(selected, setSelected, false);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children({
    selected,
    onChange: (...args) => {
      const newSelection = onChangeHandler(...args);

      if (onSelectionChange) {
        onSelectionChange(newSelection);
      }
    }
  }));
};

exports.StatefulMultiSelectionWrapper = StatefulMultiSelectionWrapper;
StatefulMultiSelectionWrapper.propTypes = {
  children: _propTypes.default.func.isRequired,
  onSelectionChange: _propTypes.default.func
};