"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRootOrgData = exports.createRootQuery = void 0;

var _appRuntime = require("@dhis2/app-runtime");

var _react = require("react");

var _patchMissingDisplayName = require("./patch-missing-display-name.js");

const createRootQuery = ids => ids.reduce((query, id) => ({ ...query,
  [id]: {
    id,
    resource: `organisationUnits`,
    params: ({
      isUserDataViewFallback
    }) => ({
      isUserDataViewFallback,
      fields: ['displayName', 'path', 'id'],
      paging: false
    })
  }
}), {});
/**
 * @param {string[]} ids
 * @param {Object} [options]
 * @param {boolean} [options.withChildren]
 * @param {boolean} [options.isUserDataViewFallback]
 * @returns {Object}
 */


exports.createRootQuery = createRootQuery;

const useRootOrgData = (ids, {
  isUserDataViewFallback
} = {}) => {
  const query = createRootQuery(ids);
  const variables = {
    isUserDataViewFallback
  };
  const [state, setState] = (0, _react.useState)({
    loading: true,
    error: null,
    data: null
  });
  const {
    refetch: queryRefetch
  } = (0, _appRuntime.useDataQuery)(query, {
    variables,
    onComplete: queryData => setState({ ...state,
      data: queryData ? (0, _patchMissingDisplayName.patchMissingDisplayName)(queryData) : {},
      loading: false
    }),
    onError: queryError => setState({ ...state,
      error: queryError,
      loading: false
    })
  });
  const refetch = (0, _react.useCallback)(() => {
    setState({ ...state,
      data: null,
      error: null,
      loading: true
    });
    queryRefetch();
  }, [queryRefetch, setState]);
  return {
    loading: state.loading,
    error: state.error,
    data: state.data,
    refetch
  };
};

exports.useRootOrgData = useRootOrgData;