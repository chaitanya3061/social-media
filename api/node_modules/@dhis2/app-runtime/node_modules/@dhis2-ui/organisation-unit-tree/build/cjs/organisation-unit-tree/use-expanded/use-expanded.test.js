"use strict";

var _react = require("react");

var _helpers = require("./helpers.js");

var _useExpanded = require("./use-expanded.js");

jest.mock('react', () => ({
  useState: jest.fn(initialValue => [initialValue, () => null])
}));
jest.mock('../use-expanded/helpers.js', () => ({
  getInitiallyExpandedPaths: jest.fn(input => input),
  createExpandHandlers: jest.fn(() => ({
    handleCollapse: () => null,
    handleExpand: () => null
  }))
}));
describe('OrganisationUnitTree - useExpanded hook', () => {
  it('should use the getInitiallyExpandedPaths helper to determine the initial state', () => {
    _helpers.getInitiallyExpandedPaths.mockImplementationOnce(input => [...input, '/foo/bar/baz']);

    const expected = ['/foo', '/foo/bar', '/foo/bar/baz'];
    const {
      expanded: actual
    } = (0, _useExpanded.useExpanded)(['/foo', '/foo/bar']);
    expect(actual).toEqual(expected);
  });
  it('should pass the setExpanded function from seState to createExpandHandlers', () => {
    const setExpanded = jest.fn();

    _react.useState.mockImplementationOnce(() => [[], setExpanded]);

    (0, _useExpanded.useExpanded)([]);
    expect(_helpers.createExpandHandlers).toHaveBeenCalledWith(expect.objectContaining({
      setExpanded
    }));
  });
});