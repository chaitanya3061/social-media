"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DxWithRealBackend = exports.DxNoSelection = exports.DxSingleSelection = exports.DxMultiSelection = exports.LoadingErrorGrandchild = exports.RootError = exports.RootLoading = exports.Loading = exports._ReplaceRoots = exports.ForceReloadOneUnit = exports._ForceReloadAll = exports.Highlighted = exports.NoSelection = exports.SingleSelection = exports.Indeterminate = exports.SelectedMultiple = exports.Filtered = exports.FilteredRoot = exports.CustomNodeLabel = exports.MultipleRoots = exports.Expanded = exports.Collapsed = exports.default = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _button = require("@dhis2-ui/button");

var _appRuntime = require("@dhis2/app-runtime");

var _react = _interopRequireWildcard(require("react"));

var _index = require("./index.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const subtitle = 'Display, manipulate and select organization units displayed in a hierarchical tree';
const description = `
This is a complex, controlled component. It needs access to an App Runtime data provider to fetch org unit data.

Several props require arrays of org. unit paths (referred to as \`orgUnitPathPropType[]\` in the table below). Take a look at the \`initiallyExpanded\` and \`filter\` props in the example to see an example of the paths format.

Example:

\`\`\`js
import { OrganisationUnitTree } from '@dhis2/ui'

const orgUnitTree = (
    <OrganisationUnitTree
        name="Root org unit"
        roots="A0000000000"
        onChange={onChange}
        onExpand={onExpand}
        onCollapse={onCollapse}
        onChildrenLoaded={onChildrenLoaded}
        // Notice the format of the org unit paths
        initiallyExpanded={['/A0000000000/A0000000001']}
        filter={['/A0000000000/A0000000001/A0000000003']}
    />
)
\`\`\`

`;
const log = true;

const onChange = (...args) => log && console.log('onChange', ...args);

const onExpand = (...args) => log && console.log('onExpand', ...args);

const onCollapse = (...args) => log && console.log('onCollapse', ...args);

const onChildrenLoaded = (...args) => log && console.log('onChildrenLoaded', ...args);

const customData = {
  organisationUnits: (...args) => {
    const [, {
      id
    }] = args;
    let data,
        delay = 0;

    if (id === 'A0000000000') {
      delay = 1000;
      data = {
        id: 'A0000000000',
        path: '/A0000000000',
        displayName: 'Org Unit 1',
        children: [{
          id: 'A0000000001',
          path: '/A0000000000/A0000000001',
          children: [{
            id: 'A0000000003'
          }, {
            id: 'A0000000004'
          }],
          displayName: 'Org Unit 2'
        }, {
          id: 'A0000000002',
          path: '/A0000000000/A0000000002',
          children: [],
          displayName: 'Org Unit 3'
        }, {
          id: 'A0000000006',
          path: '/A0000000000/A0000000006',
          children: [],
          displayName: 'Org Unit 7'
        }]
      };
    }

    if (id === 'A0000000001') {
      data = {
        id: 'A0000000001',
        path: '/A0000000000/A0000000001',
        displayName: 'Org Unit 2',
        children: [{
          id: 'A0000000003',
          path: '/A0000000000/A0000000001/A0000000003',
          children: [],
          displayName: 'Org Unit 4'
        }, {
          id: 'A0000000004',
          path: '/A0000000000/A0000000001/A0000000004',
          children: [],
          displayName: 'Org Unit 5'
        }]
      };
    }

    if (id === 'A0000000002') {
      delay = 1000;
      data = {
        displayName: 'Org Unit 3',
        id: 'A0000000002',
        path: '/A0000000000/A0000000002',
        children: []
      };
    }

    if (id === 'A0000000003') {
      data = {
        displayName: 'Org Unit 4',
        id: 'A0000000003',
        path: '/A0000000000/A0000000001/A0000000003',
        children: []
      };
    }

    if (id === 'A0000000004') {
      data = {
        displayName: 'Org Unit 5',
        id: 'A0000000004',
        path: '/A0000000000/A0000000001/A0000000004',
        children: []
      };
    }

    if (id === 'A0000000006') {
      data = {
        displayName: 'Org Unit 7',
        id: 'A0000000006',
        path: '/A0000000000/A0000000006',
        children: []
      };
    }

    if (!data) {
      return Promise.reject(new Error('404 - Org unit not found'));
    }

    return new Promise(resolve => {
      setTimeout(() => resolve(data), delay);
    });
  }
};

const ForceReloadAll = () => {
  const [forceReload, _setForceReload] = (0, _react.useState)(false);

  const setForceReload = v => console.log('setForceReload', v) || _setForceReload(v);

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_button.Button, {
    disabled: forceReload,
    onClick: () => setForceReload(true)
  }, "Reload org unit tree"), ' ', /*#__PURE__*/_react.default.createElement("span", {
    className: "jsx-2109967648"
  }, "(Force reload: ", forceReload ? 'true' : 'false', ")"), /*#__PURE__*/_react.default.createElement("div", {
    className: "jsx-2109967648"
  }, /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitTree, {
    onChange: onChange,
    forceReload: forceReload,
    name: "Root org unit",
    roots: ['A0000000000'],
    initiallyExpanded: ['/A0000000000/A0000000001'],
    selected: ['/A0000000000/A0000000001/A0000000003'],
    onChildrenLoaded: data => {
      const {
        id
      } = data;

      if (id === 'A0000000000') {
        setForceReload(false);
      }
    }
  })), /*#__PURE__*/_react.default.createElement(_style.default, {
    id: "2109967648"
  }, ["div.jsx-2109967648{width:400px;border:1px solid black;margin-top:32px;padding:16px;min-height:200px;}"]));
};

const ForceReloadIds = () => {
  return /*#__PURE__*/_react.default.createElement("p", null, "This is currently not working due to limitations of the data engine in the app runtime."); //const [idsThatShouldBeReloaded, setIdsThatShouldBeReloaded] = useState([])
  //useEffect(() => {
  //    setTimeout(() => setIdsThatShouldBeReloaded(['A0000000001']), delay)
  //}, [])
  //return (
  //    <OrganisationUnitTree
  //        onChange={onChange}
  //        idsThatShouldBeReloaded={idsThatShouldBeReloaded}
  //        name="Root org unit"
  //        roots={['A0000000000']}
  //        initiallyExpanded={['/A0000000000', '/A0000000000/A0000000001']}
  //        selected={['/A0000000000/A0000000001/A0000000003']}
  //        onChildrenLoaded={({ path, forced }) =>
  //            console.log(
  //                `Unit with path "${path}" loaded, was forced: ${
  //                    forced ? 'yes' : 'no'
  //                }`
  //            )
  //        }
  //    />
  //)
};

const ReplaceRoots = ({
  delay
}) => {
  return /*#__PURE__*/_react.default.createElement("p", null, "This is currently not working due to limitations of the data engine in the app runtime. Normally the root unit would've been replaced after ", ` ${delay} `, " milliseconds."); //const [roots, setRoots] = useState(['A0000000000'])
  //useEffect(() => {
  //    setTimeout(() => setRoots(['A0000000001']), delay)
  //}, [])
  //return (
  //    <OrganisationUnitTree
  //        name="Root org unit"
  //        roots={roots}
  //        onChange={console.log.bind(null, 'onChange')}
  //        initiallyExpanded={['/A0000000001']}
  //    />
  //)
};

var _default = {
  title: 'Forms/Organisation Unit Tree',
  component: _index.OrganisationUnitTree,
  decorators: [fn => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
    data: customData
  }, fn())],
  parameters: {
    componentSubtitle: subtitle,
    docs: {
      description: {
        component: description
      }
    }
  }
};
exports.default = _default;

const Collapsed = args => /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitTree, args);

exports.Collapsed = Collapsed;
Collapsed.args = {
  onChange: onChange,
  name: 'Root org unit',
  roots: ['A0000000000']
};

const Expanded = () => /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitTree, {
  onChange: onChange,
  name: "Root org unit",
  roots: ['A0000000000'],
  initiallyExpanded: ['/A0000000000/A0000000001']
});

exports.Expanded = Expanded;

const MultipleRoots = () => /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitTree, {
  onChange: onChange,
  name: "Root org unit",
  roots: ['A0000000000', 'A0000000001'],
  initiallyExpanded: ['/A0000000000/A0000000001']
});

exports.MultipleRoots = MultipleRoots;
MultipleRoots.storyName = 'Multiple roots';

const CustomNodeLabel = () => /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitTree, {
  name: "Root org unit",
  roots: "A0000000000",
  initiallyExpanded: ['/A0000000000/A0000000001'],
  renderNodeLabel: ({
    label,
    node
  }) => {
    if (node.path !== '/A0000000000/A0000000001') {
      return label;
    }

    return /*#__PURE__*/_react.default.createElement("span", null, "--- ", label);
  },
  onChange: onChange
});

exports.CustomNodeLabel = CustomNodeLabel;

const FilteredRoot = () => /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitTree, {
  onChange: onChange,
  name: "Root org unit",
  roots: ['A0000000000', 'A0000000001'],
  initiallyExpanded: ['/A0000000000/A0000000001'],
  filter: ['/A0000000000']
});

exports.FilteredRoot = FilteredRoot;
FilteredRoot.storyName = 'Filtered (root)';

const Filtered = () => /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitTree, {
  onChange: onChange,
  name: "Root org unit",
  roots: ['A0000000000'],
  initiallyExpanded: ['/A0000000000/A0000000001'],
  filter: ['/A0000000000/A0000000001']
});

exports.Filtered = Filtered;

const SelectedMultiple = () => /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitTree, {
  onChange: onChange,
  name: "Root org unit",
  roots: ['A0000000000'],
  selected: ['/A0000000000/A0000000002', '/A0000000000/A0000000001/A0000000003'],
  initiallyExpanded: ['/A0000000000', '/A0000000000/A0000000001']
});

exports.SelectedMultiple = SelectedMultiple;
SelectedMultiple.storyName = 'Selected multiple';

const Indeterminate = () => /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitTree, {
  onChange: onChange,
  name: "Root org unit",
  roots: ['A0000000000'],
  selected: ['/A0000000000/A0000000001'],
  initiallyExpanded: ['/A0000000000']
});

exports.Indeterminate = Indeterminate;

const SingleSelection = () => /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitTree, {
  onChange: onChange,
  singleSelection: true,
  name: "Root org unit",
  roots: ['A0000000000'],
  selected: ['/A0000000000/A0000000001'],
  initiallyExpanded: ['/A0000000000']
});

exports.SingleSelection = SingleSelection;
SingleSelection.storyName = 'Single selection';

const NoSelection = () => /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitTree, {
  onChange: onChange,
  disableSelection: true,
  name: "Root org unit",
  roots: ['A0000000000'],
  selected: ['/A0000000000/A0000000001'],
  initiallyExpanded: ['/A0000000000']
});

exports.NoSelection = NoSelection;
NoSelection.storyName = 'No selection';

const Highlighted = () => /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitTree, {
  onChange: onChange,
  highlighted: ['/A0000000000/A0000000001'],
  name: "Root org unit",
  roots: ['A0000000000'],
  initiallyExpanded: ['/A0000000000']
});

exports.Highlighted = Highlighted;

const _ForceReloadAll = () => /*#__PURE__*/_react.default.createElement(ForceReloadAll, null);

exports._ForceReloadAll = _ForceReloadAll;
_ForceReloadAll.storyName = 'Force reload all';

const ForceReloadOneUnit = () => /*#__PURE__*/_react.default.createElement(ForceReloadIds, {
  delay: 2000
});

exports.ForceReloadOneUnit = ForceReloadOneUnit;
ForceReloadOneUnit.storyName = 'Force reload one unit';

const _ReplaceRoots = () => /*#__PURE__*/_react.default.createElement(ReplaceRoots, {
  delay: 1000
});

exports._ReplaceRoots = _ReplaceRoots;
_ReplaceRoots.storyName = 'Replace roots';

const Loading = () => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: { ...customData,
    organisationUnits: (...args) => {
      const [, {
        id
      }] = args;

      if (id === 'A0000000001') {
        return new Promise(() => null);
      }

      return customData.organisationUnits(...args);
    }
  }
}, /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitTree, {
  onChange: onChange,
  name: "Root org unit",
  roots: ['A0000000000'],
  initiallyExpanded: ['/A0000000000/A0000000001']
}));

exports.Loading = Loading;

const RootLoading = () => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: { ...customData,
    organisationUnits: (...args) => {
      const [, {
        id
      }] = args;

      if (id === 'A0000000000') {
        return new Promise(() => null);
      }

      return customData.organisationUnits(...args);
    }
  }
}, /*#__PURE__*/_react.default.createElement("fieldset", {
  style: {
    maxWidth: 600
  }
}, /*#__PURE__*/_react.default.createElement("legend", {
  style: {
    padding: '0 10px'
  }
}, "Custom container (max-width: 600px)"), /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitTree, {
  onChange: onChange,
  name: "Root org unit",
  roots: ['A0000000000'],
  initiallyExpanded: ['/A0000000000/A0000000001']
})));

exports.RootLoading = RootLoading;
RootLoading.storyName = 'Root loading';

const RootError = () => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: { ...customData,
    organisationUnits: (...args) => {
      const [, {
        id
      }] = args;

      if (id === 'A0000000000') {
        return Promise.reject('This is a custom error message, it could be anything');
      }

      return customData.organisationUnits(...args);
    }
  }
}, /*#__PURE__*/_react.default.createElement("fieldset", {
  style: {
    maxWidth: 600
  }
}, /*#__PURE__*/_react.default.createElement("legend", {
  style: {
    padding: '0 10px'
  }
}, "Custom container (max-width: 600px)"), /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitTree, {
  onChange: onChange,
  name: "Root org unit",
  roots: ['A0000000000'],
  initiallyExpanded: ['/A0000000000/A0000000001']
})));

exports.RootError = RootError;
RootError.storyName = 'Root error';

const LoadingErrorGrandchild = () => /*#__PURE__*/_react.default.createElement(_appRuntime.CustomDataProvider, {
  data: { ...customData,
    organisationUnits: (...args) => {
      const [, {
        id
      }] = args;

      if (id === 'A0000000003') {
        return Promise.reject('Loading org unit 4 and 5 failed');
      }

      return customData.organisationUnits(...args);
    }
  }
}, /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitTree, {
  autoExpandLoadingError: true,
  name: "Root org unit",
  roots: ['A0000000000'],
  onChange: onChange,
  onExpand: onExpand,
  onCollapse: onCollapse,
  onChildrenLoaded: onChildrenLoaded,
  initiallyExpanded: ['/A0000000000/A0000000001']
}));

exports.LoadingErrorGrandchild = LoadingErrorGrandchild;
LoadingErrorGrandchild.storyName = 'Loading error grandchild';

const DX_onChange = (selected, setSelected, singleSelection) => ({
  id,
  path,
  checked
}) => {
  console.log('onChange', {
    path,
    id,
    checked
  });
  const pathIndex = selected.indexOf(path);

  if (checked) {
    setSelected(singleSelection ? [path] : [...selected, path]);
  } else {
    setSelected(singleSelection ? [] : [...selected.slice(0, pathIndex), ...selected.slice(pathIndex + 1)]);
  }
};

const Wrapper = props => {
  const [selected, setSelected] = (0, _react.useState)([]);
  return /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitTree, _extends({
    name: "Root org unit",
    roots: ['A0000000000'],
    selected: selected,
    onChange: DX_onChange(selected, setSelected, props.singleSelection),
    initiallyExpanded: ['A0000000001/A0000000002']
  }, props));
};

const DxMultiSelection = () => /*#__PURE__*/_react.default.createElement(Wrapper, null);

exports.DxMultiSelection = DxMultiSelection;
DxMultiSelection.storyName = 'DX: Multi selection';

const DxSingleSelection = () => /*#__PURE__*/_react.default.createElement(Wrapper, {
  singleSelection: true
});

exports.DxSingleSelection = DxSingleSelection;
DxSingleSelection.storyName = 'DX: Single selection';

const DxNoSelection = () => /*#__PURE__*/_react.default.createElement(Wrapper, {
  disableSelection: true
});

exports.DxNoSelection = DxNoSelection;
DxNoSelection.storyName = 'DX: No selection';

const DxWithRealBackend = () => /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
  style: {
    marginBottom: 20,
    lineHeight: '28px'
  }
}, /*#__PURE__*/_react.default.createElement("b", null, "This story doesn't work on netlify for some reason, just run it locally."), /*#__PURE__*/_react.default.createElement("br", null), "You need to log in to", ' ', /*#__PURE__*/_react.default.createElement("a", {
  href: "https://debug.dhis2.org/dev",
  target: "_blank",
  rel: "noopener noreferrer"
}, "https://debug.dhis2.org/dev"), /*#__PURE__*/_react.default.createElement("br", null), "Make sure the", ' ', /*#__PURE__*/_react.default.createElement("code", {
  style: {
    background: '#ccc'
  }
}, "localhost:[PORT]"), " is part of the accepted list:", ' ', /*#__PURE__*/_react.default.createElement("a", {
  href: "https://debug.dhis2.org/dev/dhis-web-settings/#/access",
  target: "_blank",
  rel: "noopener noreferrer"
}, "Settings app / Access")), /*#__PURE__*/_react.default.createElement(_appRuntime.DataProvider, {
  baseUrl: "https://debug.dhis2.org/dev",
  apiVersion: ""
}, /*#__PURE__*/_react.default.createElement(Wrapper //initiallyExpanded={['/ImspTQPwCqd/eIQbndfxQMb']}
, {
  suppressAlphabeticalSorting: true,
  roots: "ImspTQPwCqd"
})));

exports.DxWithRealBackend = DxWithRealBackend;
DxWithRealBackend.storyName = 'DX: With real backend';