"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ShareBlock = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _button = require("@dhis2-ui/button");

var _appRuntime = require("@dhis2/app-runtime");

var _propTypes = _interopRequireDefault(require("@dhis2/prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _accessSelect = require("./access-select.js");

var _autocomplete = require("./autocomplete/autocomplete.js");

var _helpers = require("./helpers");

var _index = _interopRequireDefault(require("./locales/index.js"));

var _sharingConstants = require("./sharing-constants.js");

var _sharingDialogStyles = require("./sharing-dialog.styles.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const query = {
  usersAndGroups: {
    resource: 'sharing/search',
    params: ({
      search
    }) => ({
      key: search
    })
  }
};

const ShareBlock = ({
  onAdd
}) => {
  const [userOrGroup, setUserOrGroup] = (0, _react.useState)(undefined);
  const [access, setAccess] = (0, _react.useState)(undefined);
  const [usersAndGroups, setUsersAndGroups] = (0, _react.useState)({});
  const [searchTimeout, setSearchTimeout] = (0, _react.useState)(null);
  const [searchResults, setSearchResults] = (0, _react.useState)([]);
  const {
    offline
  } = (0, _appRuntime.useOnlineStatus)();
  const {
    data,
    error,
    refetch
  } = (0, _appRuntime.useDataQuery)(query, {
    lazy: true
  });

  const addType = type => result => ({ ...result,
    type
  });

  (0, _react.useEffect)(() => {
    if (data) {
      setSearchResults(data.usersAndGroups.users.concat(data.usersAndGroups.userGroups));
      setUsersAndGroups(data.usersAndGroups.users.map(addType('user')).concat(data.usersAndGroups.userGroups.map(addType('group'))).reduce((result, obj) => {
        result[obj.id] = obj;
        return result;
      }, {}));
    }
  }, [data]);
  const fetchData = (0, _helpers.debounce)(text => {
    refetch({
      search: text
    });
  }, 500);

  const onSearch = text => {
    setUserOrGroup({
      name: text
    });
    clearTimeout(searchTimeout);

    if (text.length) {
      // debounce data fetch
      setSearchTimeout(setTimeout(() => fetchData(text), 200));
    } else {
      setSearchResults([]);
    }

    if (error) {
      console.error('onSearch error', error);
    }
  };

  const onClose = () => {
    setSearchResults([]);
    setUsersAndGroups({});
  };

  const onChange = id => {
    setUserOrGroup(usersAndGroups[id]);
    onClose();
  };

  const onSubmit = e => {
    e.preventDefault();
    onAdd({
      type: userOrGroup.type,
      id: userOrGroup.id,
      name: userOrGroup.displayName || userOrGroup.name,
      access
    });
    setUserOrGroup(undefined);
    setAccess(undefined);
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_style.default, {
    id: _sharingDialogStyles.sharingCommonStyles.__hash
  }, _sharingDialogStyles.sharingCommonStyles), /*#__PURE__*/_react.default.createElement(_style.default, {
    id: _sharingDialogStyles.shareBlockStyles.__hash
  }, _sharingDialogStyles.shareBlockStyles), /*#__PURE__*/_react.default.createElement("p", {
    className: `jsx-${_sharingDialogStyles.sharingCommonStyles.__hash} jsx-${_sharingDialogStyles.shareBlockStyles.__hash}` + " " + "sharing-subtitle"
  }, _index.default.t('Give access to a user, group or role')), /*#__PURE__*/_react.default.createElement("form", {
    onSubmit: onSubmit,
    className: `jsx-${_sharingDialogStyles.sharingCommonStyles.__hash} jsx-${_sharingDialogStyles.shareBlockStyles.__hash}` + " " + "share-block sharing-inputs"
  }, /*#__PURE__*/_react.default.createElement(_autocomplete.Autocomplete, {
    placeholder: _index.default.t('Search'),
    label: _index.default.t('User, group or role'),
    inputWidth: "400px",
    value: userOrGroup === null || userOrGroup === void 0 ? void 0 : userOrGroup.name,
    searchResults: searchResults,
    onClose: onClose,
    onChange: onChange,
    onSearch: onSearch
  }), /*#__PURE__*/_react.default.createElement(_accessSelect.AccessSelect, {
    label: _index.default.t('Access level'),
    placeholder: _index.default.t('Select a level'),
    access: access,
    accessOptions: [_sharingConstants.ACCESS_VIEW_ONLY, _sharingConstants.ACCESS_VIEW_AND_EDIT],
    onChange: setAccess
  }), /*#__PURE__*/_react.default.createElement(_button.Button, {
    type: "submit",
    disabled: offline || !(userOrGroup !== null && userOrGroup !== void 0 && userOrGroup.id) || !access
  }, _index.default.t('Give access'))));
};

exports.ShareBlock = ShareBlock;
ShareBlock.propTypes = {
  onAdd: _propTypes.default.func.isRequired
};