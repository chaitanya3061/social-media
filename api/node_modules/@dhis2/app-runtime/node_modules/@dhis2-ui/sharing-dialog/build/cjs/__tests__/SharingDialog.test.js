"use strict";

var _button = require("@dhis2-ui/button");

var _modal = require("@dhis2-ui/modal");

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _dashboardSharingContent = require("../dashboard-sharing-content.js");

var _defaultSharingContent = require("../default-sharing-content.js");

var _sharingConstants = require("../sharing-constants.js");

var _sharingDialog = require("../sharing-dialog.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('SharingDialog widget', () => {
  const onClose = jest.fn();
  const onSave = jest.fn();
  const onError = jest.fn();
  let shallowSharingDialog;
  let props;

  const getSharingDialogWidget = props => {
    if (!shallowSharingDialog) {
      shallowSharingDialog = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_sharingDialog.SharingDialog, props));
    }

    return shallowSharingDialog;
  };

  beforeEach(() => {
    shallowSharingDialog = undefined;
    props = {
      id: 'sharing-test',
      type: 'visualization',
      onClose,
      onError,
      onSave
    };
  });
  it('renders a Modal', () => expect(getSharingDialogWidget(props).find(_modal.Modal)).toHaveLength(1));
  it('renders the ModalTitle with the name of the AO if passed in props', () => {
    props.initialSharingSettings = { ..._sharingConstants.defaultSharingSettings,
      name: 'test object'
    };
    expect(getSharingDialogWidget(props).find(_modal.ModalTitle).html()).toMatch(props.initialSharingSettings.name);
  });
  it('renders a Close button', () => {
    const button = getSharingDialogWidget(props).find(_button.Button);
    expect(button).toHaveLength(1);
    expect(button.html()).toMatch('Close');
  });
  it('calls the Close callback when the Close button is clicked', () => {
    const button = getSharingDialogWidget(props).find(_button.Button);
    button.simulate('click');
    expect(onClose).toHaveBeenCalled();
  });
  it('renders a DefaultSharingContent component when the type is not dashboard', () => expect(getSharingDialogWidget(props).find(_defaultSharingContent.DefaultSharingContent)).toHaveLength(1));
  it('renders a DashboardSharingContent component when the type is dashboard', () => {
    props.type = 'dashboard';
    expect(getSharingDialogWidget(props).find(_dashboardSharingContent.DashboardSharingContent)).toHaveLength(1);
  });
});