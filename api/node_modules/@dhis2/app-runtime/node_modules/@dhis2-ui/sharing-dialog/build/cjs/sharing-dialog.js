"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SharingDialog = void 0;

var _button = require("@dhis2-ui/button");

var _modal = require("@dhis2-ui/modal");

var _appRuntime = require("@dhis2/app-runtime");

var _propTypes = _interopRequireDefault(require("@dhis2/prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _dashboardSharingContent = require("./dashboard-sharing-content.js");

var _defaultSharingContent = require("./default-sharing-content.js");

var _index = _interopRequireDefault(require("./locales/index.js"));

var _sharingConstants = require("./sharing-constants.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const query = {
  sharing: {
    resource: 'sharing',
    params: ({
      type,
      id
    }) => ({
      type,
      id
    })
  }
};
const mutation = {
  resource: 'sharing',
  params: ({
    type,
    id
  }) => ({
    type,
    id
  }),
  type: 'update',
  data: ({
    sharing
  }) => ({
    object: sharing.object
  })
};

const SharingDialog = ({
  initialSharingSettings,
  id,
  type,
  onClose,
  onError,
  onSave
}) => {
  const [sharingSettings, updateSharingSettings] = (0, _react.useState)(initialSharingSettings);
  const [isDirty, setIsDirty] = (0, _react.useState)(false);
  const {
    show
  } = (0, _appRuntime.useAlert)(error => error, {
    critical: true
  });

  const onDataEngineError = error => {
    show(error);
    onError(error);
  };

  const onMutateError = error => {
    onDataEngineError(error); // after a mutate error the state won't reflect the stored sharing settings
    // a refetch is needed

    fetchSharingSettings(type, id);
  };

  const {
    data,
    refetch
  } = (0, _appRuntime.useDataQuery)(query, {
    lazy: true,
    onError: onDataEngineError
  });

  const fetchSharingSettings = (type, id) => refetch({
    type,
    id
  });

  const [mutate] = (0, _appRuntime.useDataMutation)(mutation, {
    onError: onMutateError,
    onComplete: onSave
  });

  const mutateSharingSettings = sharing => {
    mutate({
      type,
      id,
      sharing
    });
  }; // refresh sharing settings if type/id changes


  (0, _react.useEffect)(() => {
    fetchSharingSettings(type, id);
  }, [type, id]); // update state after fetch

  (0, _react.useEffect)(() => {
    if (data !== null && data !== void 0 && data.sharing) {
      if (data.sharing.object.userAccesses.length) {
        data.sharing.object.userAccesses.forEach(userAccess => addUserOrGroupAccess({
          type: 'user',
          id: userAccess.id,
          name: userAccess.name,
          access: (0, _sharingConstants.convertAccessToConstant)(userAccess.access)
        }));
      }

      if (data.sharing.object.userGroupAccesses.length) {
        data.sharing.object.userGroupAccesses.forEach(groupAccess => addUserOrGroupAccess({
          type: 'group',
          id: groupAccess.id,
          name: groupAccess.name,
          access: (0, _sharingConstants.convertAccessToConstant)(groupAccess.access)
        }));
      }

      setIsDirty(false);
      updateSharingSettings(prevState => ({ ...prevState,
        allowExternal: data.sharing.meta.allowExternalAccess,
        allowPublic: data.sharing.meta.allowPublicAccess,
        external: (0, _sharingConstants.convertAccessToConstant)(data.sharing.object.externalAccess),
        public: (0, _sharingConstants.convertAccessToConstant)(data.sharing.object.publicAccess),
        name: data.sharing.object.displayName || data.sharing.object.name,
        id: data.sharing.object.id
      }));
    }
  }, [data]); // PUT when state change (but not when setting state after fetch)

  (0, _react.useEffect)(() => {
    if (isDirty) {
      saveSharingSettings(sharingSettings);
    }
  }, [sharingSettings, isDirty]);

  const addUserOrGroupAccess = ({
    type,
    id,
    name,
    access
  }) => updateSharingSettings(prevState => ({ ...prevState,
    [`${type}s`]: { ...prevState[`${type}s`],
      [id]: {
        id,
        name,
        access
      }
    }
  }));

  const removeUserOrGroupAccess = ({
    type,
    id
  }) => updateSharingSettings(prevState => {
    const usersOrGroups = prevState[`${type}s`];
    delete usersOrGroups[id];
    return { ...prevState,
      [`${type}s`]: { ...usersOrGroups
      }
    };
  });

  const changeAccess = ({
    type,
    id,
    access
  }) => {
    const updatedAccess = {};

    switch (type) {
      case 'external':
        updatedAccess.external = access;
        break;

      case 'public':
        updatedAccess.public = access;
        break;

      case 'group':
      case 'user':
        {
          const pluralType = `${type}s`;
          updatedAccess[pluralType] = { ...sharingSettings[pluralType],
            [id]: { ...sharingSettings[pluralType][id],
              access
            }
          };
          break;
        }
    }

    updateSharingSettings(prevState => ({ ...prevState,
      ...updatedAccess
    }));
  };

  const saveSharingSettings = sharingSettings => {
    // prepare payload
    const payload = {
      object: {
        publicAccess: (0, _sharingConstants.convertConstantToAccess)(sharingSettings.public),
        externalAccess: (0, _sharingConstants.convertConstantToAccess)(sharingSettings.external, true),
        userAccesses: Object.values(sharingSettings.users).map(userSharingSettings => ({ ...userSharingSettings,
          access: (0, _sharingConstants.convertConstantToAccess)(userSharingSettings.access)
        })),
        userGroupAccesses: Object.values(sharingSettings.groups).map(groupSharingSettings => ({ ...groupSharingSettings,
          access: (0, _sharingConstants.convertConstantToAccess)(groupSharingSettings.access)
        }))
      }
    };
    mutateSharingSettings(payload);
  };

  const onAdd = data => {
    setIsDirty(true);
    addUserOrGroupAccess(data);
  };

  const onChange = data => {
    setIsDirty(true);
    changeAccess(data);
  };

  const onRemove = data => {
    setIsDirty(true);
    removeUserOrGroupAccess(data);
  };

  return /*#__PURE__*/_react.default.createElement(_modal.Modal, {
    large: true,
    position: "top",
    onClose: onClose
  }, /*#__PURE__*/_react.default.createElement(_modal.ModalTitle, null, sharingSettings.name ? _index.default.t('Sharing and access: {{- objectName}}', {
    objectName: sharingSettings.name,
    nsSeparator: '|'
  }) : _index.default.t('Sharing and access')), /*#__PURE__*/_react.default.createElement(_modal.ModalContent, null, type === 'dashboard' ? /*#__PURE__*/_react.default.createElement(_dashboardSharingContent.DashboardSharingContent, {
    sharingSettings: sharingSettings,
    onAdd: onAdd,
    onChange: onChange,
    onRemove: onRemove
  }) : /*#__PURE__*/_react.default.createElement(_defaultSharingContent.DefaultSharingContent, {
    sharingSettings: sharingSettings,
    onAdd: onAdd,
    onChange: onChange,
    onRemove: onRemove
  })), /*#__PURE__*/_react.default.createElement(_modal.ModalActions, null, /*#__PURE__*/_react.default.createElement(_button.ButtonStrip, {
    end: true
  }, /*#__PURE__*/_react.default.createElement(_button.Button, {
    type: "button",
    secondary: true,
    onClick: onClose
  }, _index.default.t('Close')))));
};

exports.SharingDialog = SharingDialog;
SharingDialog.defaultProps = {
  initialSharingSettings: _sharingConstants.defaultSharingSettings,
  onError: Function.prototype,
  onSave: Function.prototype
};
SharingDialog.propTypes = {
  /** The id of the object to share */
  id: _propTypes.default.string.isRequired,

  /** The type of object to share */
  type: _propTypes.default.string.isRequired,
  onClose: _propTypes.default.func.isRequired,
  initialSharingSettings: _propTypes.default.shape({
    allowExternal: _propTypes.default.bool,
    allowPublic: _propTypes.default.bool,
    external: _propTypes.default.string,
    groups: _propTypes.default.object,
    name: _propTypes.default.string,
    public: _propTypes.default.string,
    users: _propTypes.default.object
  }),
  onError: _propTypes.default.func,
  onSave: _propTypes.default.func
};