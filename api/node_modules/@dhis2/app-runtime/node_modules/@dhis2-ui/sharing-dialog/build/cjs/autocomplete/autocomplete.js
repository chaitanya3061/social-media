"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Autocomplete = void 0;

var _input = require("@dhis2-ui/input");

var _menu = require("@dhis2-ui/menu");

var _tooltip = require("@dhis2-ui/tooltip");

var _appRuntime = require("@dhis2/app-runtime");

var _propTypes = _interopRequireDefault(require("@dhis2/prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _index = _interopRequireDefault(require("../locales/index.js"));

var _menuWrapper = require("./menu-wrapper");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Keycodes for the keypress event handlers
// XXX implement keyboard navigation in the Menu ?!

/*const ESCAPE_KEY = 27
const SPACE_KEY = 32
const UP_KEY = 38
const DOWN_KEY = 40
*/
// XXX pass this whole component or the one that renders the MenuItem
// from the app/parent to make it as flexible as possible
const SearchResults = ({
  searchResults,
  onClick
}) => /*#__PURE__*/_react.default.createElement(_menu.Menu, null, searchResults.map(searchResult => /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
  key: searchResult.id,
  label: searchResult.displayName,
  value: searchResult.id,
  onClick: onClick
})));

SearchResults.propTypes = {
  searchResults: _propTypes.default.array.isRequired,
  onClick: _propTypes.default.func.isRequired
};

const Autocomplete = ({
  label,
  placeholder,
  onChange,
  onClose,
  onSearch,
  dataTest,
  maxHeight,
  inputWidth,
  value,
  searchResults
}) => {
  const inputRef = /*#__PURE__*/(0, _react.createRef)();
  const menuRef = /*#__PURE__*/(0, _react.createRef)();
  const {
    offline
  } = (0, _appRuntime.useOnlineStatus)();
  const [menuWidth, setMenuWidth] = (0, _react.useState)('auto');
  (0, _react.useEffect)(() => {
    if (inputRef.current) {
      setMenuWidth(`${inputRef.current.offsetWidth}px`);
    }
  }, []);

  const onInputChange = ({
    value
  }) => {
    onSearch(value);
  };

  const onSelect = ({
    value
  }) => {
    onChange(value);
  };

  const renderInputField = () => /*#__PURE__*/_react.default.createElement(_input.InputField, {
    label: label,
    placeholder: placeholder,
    onChange: onInputChange,
    value: value,
    inputWidth: inputWidth,
    disabled: offline
  });

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "autocomplete-block",
    ref: menuRef
  }, /*#__PURE__*/_react.default.createElement("div", {
    ref: inputRef
  }, offline ? /*#__PURE__*/_react.default.createElement(_tooltip.Tooltip, {
    content: _index.default.t('Not available offline')
  }, renderInputField()) : renderInputField()), Boolean(searchResults.length) && /*#__PURE__*/_react.default.createElement(_menuWrapper.MenuWrapper, {
    onClick: onClose,
    maxHeight: maxHeight,
    menuRef: menuRef,
    menuWidth: menuWidth,
    dataTest: `${dataTest}-menu`
  }, /*#__PURE__*/_react.default.createElement(SearchResults, {
    searchResults: searchResults,
    onClick: onSelect
  })));
};

exports.Autocomplete = Autocomplete;
Autocomplete.defaultProps = {
  dataTest: 'dhis2-uicore-select'
};
Autocomplete.propTypes = {
  searchResults: _propTypes.default.array.isRequired,
  dataTest: _propTypes.default.string,
  inputWidth: _propTypes.default.string,
  label: _propTypes.default.string,
  maxHeight: _propTypes.default.string,
  placeholder: _propTypes.default.string,
  value: _propTypes.default.string,
  onChange: _propTypes.default.func,
  onClose: _propTypes.default.func,
  onSearch: _propTypes.default.func
};