"use strict";

var _uiIcons = require("@dhis2/ui-icons");

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _avatar = require("../icons/avatar.js");

var _sharingConstants = require("../sharing-constants.js");

var _sharingListItem = require("../sharing-list-item.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('SharingDialog widget - SharingListItem component', () => {
  let shallowSharingListItemComponent;
  let props;
  const onChange = jest.fn();
  const onRemove = jest.fn();

  const getSharingListItemComponent = props => {
    if (!shallowSharingListItemComponent) {
      shallowSharingListItemComponent = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_sharingListItem.SharingListItem, props));
    }

    return shallowSharingListItemComponent;
  };

  describe.skip('external access', () => {
    beforeEach(() => {
      shallowSharingListItemComponent = undefined;
      props = {
        access: _sharingConstants.ACCESS_NONE,
        accessOptions: [],
        disabled: false,
        name: 'External test',
        target: _sharingConstants.SHARE_TARGET_EXTERNAL,
        onChange,
        onRemove
      };
    });
    it('renders the icon for external access', () => expect(getSharingListItemComponent(props).find(_uiIcons.IconWorld24)).toHaveLength(1));
    it('renders the label for external access', () => expect(getSharingListItemComponent(props).find('.share-entity').html()).toMatch(props.name));
    it('renders the description for external access', () => expect(getSharingListItemComponent(props).find('.share-context').html()).toMatch(_sharingConstants.accessStrings[props.access].description()));
  });
  describe('public access', () => {
    beforeEach(() => {
      shallowSharingListItemComponent = undefined;
      props = {
        access: _sharingConstants.ACCESS_NONE,
        accessOptions: [],
        disabled: false,
        name: 'Public test',
        target: _sharingConstants.SHARE_TARGET_PUBLIC,
        onChange,
        onRemove
      };
    });
    it('renders the icon for public access', () => expect(getSharingListItemComponent(props).find(_uiIcons.IconUserGroup24)).toHaveLength(1));
    it('renders the label for public access', () => expect(getSharingListItemComponent(props).find('.share-entity').html()).toMatch(props.name));
    it('renders the description for public access', () => expect(getSharingListItemComponent(props).find('.share-context').html()).toMatch(_sharingConstants.accessStrings[props.access].publicDescription()));
  });
  describe('group access', () => {
    beforeEach(() => {
      shallowSharingListItemComponent = undefined;
      props = {
        access: _sharingConstants.ACCESS_NONE,
        accessOptions: [],
        disabled: false,
        name: 'Group test',
        target: _sharingConstants.SHARE_TARGET_GROUP,
        onChange,
        onRemove
      };
    });
    it('renders the icon for group access', () => expect(getSharingListItemComponent(props).find(_uiIcons.IconUserGroup24)).toHaveLength(1));
    it('renders the label for group access', () => expect(getSharingListItemComponent(props).find('.share-entity').html()).toMatch(props.name));
    it('renders the description for group access', () => expect(getSharingListItemComponent(props).find('.share-context').html()).toMatch(_sharingConstants.accessStrings[props.access].description()));
  });
  describe('user access', () => {
    beforeEach(() => {
      shallowSharingListItemComponent = undefined;
      props = {
        access: _sharingConstants.ACCESS_NONE,
        accessOptions: [],
        disabled: false,
        name: 'User test',
        target: _sharingConstants.SHARE_TARGET_USER,
        onChange,
        onRemove
      };
    });
    it('renders the icon for user access', () => expect(getSharingListItemComponent(props).find(_avatar.Avatar)).toHaveLength(1));
    it('renders the label for user access', () => expect(getSharingListItemComponent(props).find('.share-entity').html()).toMatch(props.name));
    it('renders the description for user access', () => expect(getSharingListItemComponent(props).find('.share-context').html()).toMatch(_sharingConstants.accessStrings[props.access].description()));
  });
});