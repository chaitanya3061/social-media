import _JSXStyle from "styled-jsx/style";
import { Button } from '@dhis2-ui/button';
import { useDataQuery, useOnlineStatus } from '@dhis2/app-runtime';
import PropTypes from '@dhis2/prop-types';
import React, { useEffect, useState } from 'react';
import { AccessSelect } from './access-select.js';
import { Autocomplete } from './autocomplete/autocomplete.js';
import { debounce } from './helpers';
import i18n from './locales/index.js';
import { ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT } from './sharing-constants.js';
import { sharingCommonStyles, shareBlockStyles } from './sharing-dialog.styles.js';
const query = {
  usersAndGroups: {
    resource: 'sharing/search',
    params: ({
      search
    }) => ({
      key: search
    })
  }
};
export const ShareBlock = ({
  onAdd
}) => {
  const [userOrGroup, setUserOrGroup] = useState(undefined);
  const [access, setAccess] = useState(undefined);
  const [usersAndGroups, setUsersAndGroups] = useState({});
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchResults, setSearchResults] = useState([]);
  const {
    offline
  } = useOnlineStatus();
  const {
    data,
    error,
    refetch
  } = useDataQuery(query, {
    lazy: true
  });

  const addType = type => result => ({ ...result,
    type
  });

  useEffect(() => {
    if (data) {
      setSearchResults(data.usersAndGroups.users.concat(data.usersAndGroups.userGroups));
      setUsersAndGroups(data.usersAndGroups.users.map(addType('user')).concat(data.usersAndGroups.userGroups.map(addType('group'))).reduce((result, obj) => {
        result[obj.id] = obj;
        return result;
      }, {}));
    }
  }, [data]);
  const fetchData = debounce(text => {
    refetch({
      search: text
    });
  }, 500);

  const onSearch = text => {
    setUserOrGroup({
      name: text
    });
    clearTimeout(searchTimeout);

    if (text.length) {
      // debounce data fetch
      setSearchTimeout(setTimeout(() => fetchData(text), 200));
    } else {
      setSearchResults([]);
    }

    if (error) {
      console.error('onSearch error', error);
    }
  };

  const onClose = () => {
    setSearchResults([]);
    setUsersAndGroups({});
  };

  const onChange = id => {
    setUserOrGroup(usersAndGroups[id]);
    onClose();
  };

  const onSubmit = e => {
    e.preventDefault();
    onAdd({
      type: userOrGroup.type,
      id: userOrGroup.id,
      name: userOrGroup.displayName || userOrGroup.name,
      access
    });
    setUserOrGroup(undefined);
    setAccess(undefined);
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_JSXStyle, {
    id: sharingCommonStyles.__hash
  }, sharingCommonStyles), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: shareBlockStyles.__hash
  }, shareBlockStyles), /*#__PURE__*/React.createElement("p", {
    className: `jsx-${sharingCommonStyles.__hash} jsx-${shareBlockStyles.__hash}` + " " + "sharing-subtitle"
  }, i18n.t('Give access to a user, group or role')), /*#__PURE__*/React.createElement("form", {
    onSubmit: onSubmit,
    className: `jsx-${sharingCommonStyles.__hash} jsx-${shareBlockStyles.__hash}` + " " + "share-block sharing-inputs"
  }, /*#__PURE__*/React.createElement(Autocomplete, {
    placeholder: i18n.t('Search'),
    label: i18n.t('User, group or role'),
    inputWidth: "400px",
    value: userOrGroup === null || userOrGroup === void 0 ? void 0 : userOrGroup.name,
    searchResults: searchResults,
    onClose: onClose,
    onChange: onChange,
    onSearch: onSearch
  }), /*#__PURE__*/React.createElement(AccessSelect, {
    label: i18n.t('Access level'),
    placeholder: i18n.t('Select a level'),
    access: access,
    accessOptions: [ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT],
    onChange: setAccess
  }), /*#__PURE__*/React.createElement(Button, {
    type: "submit",
    disabled: offline || !(userOrGroup !== null && userOrGroup !== void 0 && userOrGroup.id) || !access
  }, i18n.t('Give access'))));
};
ShareBlock.propTypes = {
  onAdd: PropTypes.func.isRequired
};