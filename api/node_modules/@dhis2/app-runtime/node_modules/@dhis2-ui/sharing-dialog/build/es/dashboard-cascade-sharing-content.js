import _JSXStyle from "styled-jsx/style";
import { Button } from '@dhis2-ui/button';
import { CircularLoader } from '@dhis2-ui/loader';
import { NoticeBox } from '@dhis2-ui/notice-box';
import { Tooltip } from '@dhis2-ui/tooltip';
import { useDataQuery, useDataMutation, useOnlineStatus } from '@dhis2/app-runtime';
import PropTypes from '@dhis2/prop-types';
import { colors } from '@dhis2/ui-constants';
import { IconInfo16, IconCheckmark16 } from '@dhis2/ui-icons';
import React, { useMemo } from 'react';
import i18n from './locales/index.js';
import { cascadeSharingStyles } from './sharing-dialog.styles.js';
const dashboardQuery = {
  dashboard: {
    resource: 'dashboards',
    id: ({
      id
    }) => id,
    params: {
      fields: 'dashboardItems[type]'
    }
  }
};

const getVisualizationsCount = queryResponse => {
  var _queryResponse$dashbo;

  return (queryResponse === null || queryResponse === void 0 ? void 0 : (_queryResponse$dashbo = queryResponse.dashboard.dashboardItems) === null || _queryResponse$dashbo === void 0 ? void 0 : _queryResponse$dashbo.length) > 0 ? queryResponse.dashboard.dashboardItems.filter(item => ['VISUALIZATION', 'MAP', 'EVENT_CHART', 'EVENT_REPORT'].includes(item.type)).length : 0;
};

const getCascadeSharingMutation = id => ({
  resource: `dashboards/cascadeSharing/${id}`,
  type: 'create'
});

export const DashboardCascadeSharingContent = ({
  sharingSettings
}) => {
  const {
    offline
  } = useOnlineStatus();
  const {
    data: queryResponse
  } = useDataQuery(dashboardQuery, {
    variables: {
      id: sharingSettings.id
    }
  });
  const visualizationsCount = getVisualizationsCount(queryResponse);
  const mutation = useMemo(() => getCascadeSharingMutation(sharingSettings.id), []);
  const [mutate, {
    loading,
    error,
    data: mutationResponse
  }] = useDataMutation(mutation);
  const usersGroupsCount = Object.keys(sharingSettings.users).length + Object.keys(sharingSettings.groups).length;

  const renderApplySharingButton = () => /*#__PURE__*/React.createElement(Button, {
    type: "button",
    disabled: offline || loading || !usersGroupsCount,
    secondary: true,
    onClick: () => mutate()
  }, i18n.t('Apply sharing to dashboard visualizations'));

  const getInfoMessage = () => {
    let message;

    if (usersGroupsCount > 0) {
      const messagePart1 = i18n.t('{{count}} visualization on this dashboard will potentially get updated sharing settings.', {
        count: visualizationsCount,
        defaultValue: '{{count}} visualization on this dashboard will potentially get updated sharing settings.',
        defaultValue_plural: 'All {{count}} visualizations on this dashboard will potentially get updated sharing settings.'
      });
      message = messagePart1 + ' ' + i18n.t('These updated sharing settings will apply to {{count}} user or group.', {
        count: usersGroupsCount,
        defaultValue: 'These updated sharing settings will apply to {{count}} user or group.',
        defaultValue_plural: 'These updated sharing settings will apply to {{count}} users or groups.'
      });
    } else {
      message = i18n.t('There are no users, groups or roles to apply sharing settings for.');
    }

    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_JSXStyle, {
      id: cascadeSharingStyles.__hash
    }, cascadeSharingStyles), /*#__PURE__*/React.createElement("div", {
      className: `jsx-${cascadeSharingStyles.__hash}` + " " + "box-block"
    }, /*#__PURE__*/React.createElement("div", {
      className: `jsx-${cascadeSharingStyles.__hash}` + " " + "box box-info"
    }, /*#__PURE__*/React.createElement(IconInfo16, {
      color: colors.grey900
    }), /*#__PURE__*/React.createElement("span", {
      className: `jsx-${cascadeSharingStyles.__hash}` + " " + "box-text"
    }, message))));
  };

  const getResultMessage = () => {
    let message;

    if ((mutationResponse === null || mutationResponse === void 0 ? void 0 : mutationResponse.errorReports.length) === 0) {
      const updatedItems = mutationResponse.countUpdatedDashboardItems;

      if (updatedItems === 0) {
        message = i18n.t('No visualizations were updated because sharing settings are already sufficient.');
        return /*#__PURE__*/React.createElement(NoticeBox, null, message);
      } else if (updatedItems === visualizationsCount) {
        message = i18n.t('Successfully updated sharing for {{count}} visualization.', {
          count: visualizationsCount,
          defaultValue: 'Successfully updated sharing for {{count}} visualization.',
          defaultValue_plural: 'Successfully updated sharing for {{count}} visualizations.'
        });
      } else if (updatedItems < visualizationsCount) {
        // split in 2 because of nesting with plurals not working
        message = i18n.t('{{count}} visualization was updated.', {
          count: updatedItems,
          defaultValue: '{{count}} visualization was updated.',
          defaultValue_plural: '{{count}} visualizations were updated.'
        }) + ' ' + i18n.t('{{count}} visualization already has sufficient sharing settings.', {
          count: visualizationsCount - updatedItems,
          defaultValue: '{{count}} visualization already has sufficient sharing settings.',
          defaultValue_plural: '{{count}} visualizations already have sufficient sharing settings.'
        });
      }

      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_JSXStyle, {
        id: cascadeSharingStyles.__hash
      }, cascadeSharingStyles), /*#__PURE__*/React.createElement("div", {
        className: `jsx-${cascadeSharingStyles.__hash}` + " " + "box-block"
      }, /*#__PURE__*/React.createElement("div", {
        className: `jsx-${cascadeSharingStyles.__hash}` + " " + "box box-success"
      }, /*#__PURE__*/React.createElement(IconCheckmark16, {
        color: colors.grey700
      }), /*#__PURE__*/React.createElement("span", {
        className: `jsx-${cascadeSharingStyles.__hash}` + " " + "box-text"
      }, message))));
    } else {
      const messageCheckPermissions = i18n.t('Check that you have permission to change sharing for all visualizations.');

      if ((mutationResponse === null || mutationResponse === void 0 ? void 0 : mutationResponse.countUpdatedDashboardItems) === 0) {
        message = i18n.t('No visualizations were updated.') + ' ' + messageCheckPermissions;
      } else if (mutationResponse !== null && mutationResponse !== void 0 && mutationResponse.countUpdatedDashboardItems && queryResponse !== null && queryResponse !== void 0 && queryResponse.dashboard.itemsCount) {
        const messagePart1 = i18n.t('{{count}} visualization was updated', {
          count: mutationResponse.countUpdatedDashboardItems,
          defaultValue: '{{count}} visualization was updated',
          defaultValue_plural: '{{count}} visualizations were updated.'
        });
        message = messagePart1 + ' ' + i18n.t('{{count}} visualization could not be updated.', {
          count: visualizationsCount - mutationResponse.countUpdatedDashboardItems,
          defaultValue: '{{count}} visualization could not be updated.',
          defaultValue_plural: '{{count}} visualizations could not be updated.'
        }) + ' ' + messageCheckPermissions;
      }

      return /*#__PURE__*/React.createElement(NoticeBox, {
        warning: true
      }, message);
    }
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_JSXStyle, {
    id: cascadeSharingStyles.__hash
  }, cascadeSharingStyles), /*#__PURE__*/React.createElement("div", {
    className: `jsx-${cascadeSharingStyles.__hash}` + " " + "title"
  }, i18n.t('Apply dashboard sharing settings to visualizations')), /*#__PURE__*/React.createElement("div", {
    className: `jsx-${cascadeSharingStyles.__hash}` + " " + "description"
  }, i18n.t('Applying the same sharing settings makes sure that users, groups and roles that have access to the dashboard also have at least "View only" access to its visualizations (charts, tables, maps, event charts, event reports).')), /*#__PURE__*/React.createElement("div", {
    className: `jsx-${cascadeSharingStyles.__hash}` + " " + "description"
  }, i18n.t('If a user, group, or role already has "View and edit" access to a visualization, this won\'t be reduced to "View only". "All users" access level won\'t be updated or changed.')), /*#__PURE__*/React.createElement("div", {
    className: `jsx-${cascadeSharingStyles.__hash}` + " " + "description"
  }, i18n.t("Applying sharing can't be undone, and needs to done again if new visualizations are added to the dashboard or its sharing settings are changed.")), visualizationsCount && getInfoMessage(), offline ? /*#__PURE__*/React.createElement(Tooltip, {
    content: i18n.t('Not available offline')
  }, renderApplySharingButton()) : renderApplySharingButton(), loading && /*#__PURE__*/React.createElement("div", {
    className: `jsx-${cascadeSharingStyles.__hash}` + " " + "loading"
  }, /*#__PURE__*/React.createElement(CircularLoader, {
    small: true
  }), ' ', /*#__PURE__*/React.createElement("span", {
    className: `jsx-${cascadeSharingStyles.__hash}`
  }, i18n.t('Updating sharing settings...'))), /*#__PURE__*/React.createElement("div", {
    className: `jsx-${cascadeSharingStyles.__hash}` + " " + "result-box"
  }, error && /*#__PURE__*/React.createElement(NoticeBox, {
    error: true
  }, i18n.t('There was a problem updating dashboard visualizations. No visualizations were updated. Try again, or contact a system administrator.')), mutationResponse && getResultMessage()));
};
DashboardCascadeSharingContent.propTypes = {
  sharingSettings: PropTypes.object.isRequired
};