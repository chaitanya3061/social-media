"use strict";

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _sharingConstants = require("../sharing-constants.js");

var _sharingList = require("../sharing-list.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('SharingDialog widget - SharingList component', () => {
  let shallowSharingListComponent;
  let props;
  const onChange = jest.fn();
  const onRemove = jest.fn();

  const getSharingListComponent = props => {
    if (!shallowSharingListComponent) {
      shallowSharingListComponent = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_sharingList.SharingList, props));
    }

    return shallowSharingListComponent;
  };

  beforeEach(() => {
    shallowSharingListComponent = undefined;
    props = {
      sharingSettings: _sharingConstants.defaultSharingSettings,
      onChange,
      onRemove
    };
  });
  it.skip('renders a SharingListItem for external access', () => {
    const external = getSharingListComponent(props).findWhere(n => n.prop('target') === _sharingConstants.SHARE_TARGET_EXTERNAL);
    expect(external).toHaveLength(1);
    expect(external.prop('name')).toEqual('External users');
    expect(external.prop('access')).toEqual(_sharingConstants.defaultSharingSettings.external);
  });
  it('renders a SharingListItem for public access', () => {
    const external = getSharingListComponent(props).findWhere(n => n.prop('target') === _sharingConstants.SHARE_TARGET_PUBLIC);
    expect(external).toHaveLength(1);
    expect(external.prop('name')).toEqual('All users');
    expect(external.prop('access')).toEqual(_sharingConstants.defaultSharingSettings.public);
  });
  it('renders a SharingListItem for a user group access', () => {
    const groupId = 'test-group-id';
    props.sharingSettings.groups = {
      [groupId]: {
        id: groupId,
        name: 'Test group',
        access: 'r-------'
      }
    };
    const group = getSharingListComponent(props).findWhere(n => n.prop('target') === _sharingConstants.SHARE_TARGET_GROUP);
    expect(group).toHaveLength(1);
    expect(group.prop('name')).toEqual(props.sharingSettings.groups[groupId].name);
    expect(group.prop('access')).toEqual(props.sharingSettings.groups[groupId].access);
  });
  it('renders a SharingListItem for a user access', () => {
    const userId = 'test-user-id';
    props.sharingSettings.users = {
      [userId]: {
        id: userId,
        name: 'User group',
        access: 'rw------'
      }
    };
    const user = getSharingListComponent(props).findWhere(n => n.prop('target') === _sharingConstants.SHARE_TARGET_USER);
    expect(user).toHaveLength(1);
    expect(user.prop('name')).toEqual(props.sharingSettings.users[userId].name);
    expect(user.prop('access')).toEqual(props.sharingSettings.users[userId].access);
  });
});