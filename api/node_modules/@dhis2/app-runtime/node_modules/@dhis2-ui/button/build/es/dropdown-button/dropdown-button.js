function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import _JSXStyle from "styled-jsx/style";
import { Layer } from '@dhis2-ui/layer';
import { Popper } from '@dhis2-ui/popper';
import { spacers, sharedPropTypes } from '@dhis2/ui-constants';
import PropTypes from 'prop-types';
import React, { Component } from 'react';
import { Button } from '../index.js';

function ArrowDown({
  className
}) {
  return /*#__PURE__*/React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 12 12",
    className: "jsx-2347926856" + " " + (className || "")
  }, /*#__PURE__*/React.createElement("path", {
    d: "m5.29289 8.7071c.39053.3905 1.02369.3905 1.41422 0l2.99999-2.99999c.3905-.39053.3905-1.02369 0-1.41422-.3905-.39052-1.0237-.39052-1.4142 0l-2.2929 2.2929-2.29289-2.2929c-.39053-.39052-1.02369-.39052-1.41422 0-.39052.39053-.39052 1.02369 0 1.41422z",
    className: "jsx-2347926856"
  }), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "2347926856"
  }, ["svg.jsx-2347926856{fill:inherit;height:12px;width:12px;vertical-align:middle;pointer-events:none;}"]));
}

ArrowDown.propTypes = {
  className: PropTypes.string
};

function ArrowUp({
  className
}) {
  return /*#__PURE__*/React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 12 12",
    className: "jsx-2347926856" + " " + (className || "")
  }, /*#__PURE__*/React.createElement("path", {
    d: "m5.29289 8.7071c.39053.3905 1.02369.3905 1.41422 0l2.99999-2.99999c.3905-.39053.3905-1.02369 0-1.41422-.3905-.39052-1.0237-.39052-1.4142 0l-2.2929 2.2929-2.29289-2.2929c-.39053-.39052-1.02369-.39052-1.41422 0-.39052.39053-.39052 1.02369 0 1.41422z",
    transform: "matrix(1 0 0 -1 0 12.999974)",
    className: "jsx-2347926856"
  }), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "2347926856"
  }, ["svg.jsx-2347926856{fill:inherit;height:12px;width:12px;vertical-align:middle;pointer-events:none;}"]));
}

ArrowUp.propTypes = {
  className: PropTypes.string
};
const arrow = {
  styles: /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "736002830"
  }, [`.jsx-736002830{margin-left:${spacers.dp12};}`]),
  className: "jsx-736002830"
};

class DropdownButton extends Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      open: false
    });

    _defineProperty(this, "anchorRef", /*#__PURE__*/React.createRef());

    _defineProperty(this, "onToggle", ({
      name,
      value
    }, event) => {
      this.setState({
        open: !this.state.open
      }, () => {
        if (this.props.onClick) {
          this.props.onClick({
            name,
            value,
            open: this.state.open
          }, event);
        }
      });
    });
  }

  render() {
    const {
      open
    } = this.state;
    const {
      component,
      children,
      className,
      destructive,
      disabled,
      icon,
      large,
      primary,
      secondary,
      small,
      name,
      value,
      tabIndex,
      type,
      initialFocus,
      dataTest
    } = this.props;
    const ArrowIconComponent = open ? ArrowUp : ArrowDown;
    return /*#__PURE__*/React.createElement("div", {
      ref: this.anchorRef,
      "data-test": dataTest,
      className: "jsx-3163060161"
    }, /*#__PURE__*/React.createElement(Button, {
      className: className,
      destructive: destructive,
      disabled: disabled,
      icon: icon,
      large: large,
      primary: primary,
      secondary: secondary,
      small: small,
      onClick: this.onToggle,
      name: name,
      value: value,
      tabIndex: tabIndex,
      type: type,
      initialFocus: initialFocus
    }, children, /*#__PURE__*/React.createElement(ArrowIconComponent, {
      className: "jsx-3163060161" + " " + (arrow.className || "")
    })), open && /*#__PURE__*/React.createElement(Layer, {
      onClick: this.onToggle,
      transparent: true
    }, /*#__PURE__*/React.createElement(Popper, {
      dataTest: `${dataTest}-popper`,
      placement: "bottom-start",
      reference: this.anchorRef
    }, component)), arrow.styles, /*#__PURE__*/React.createElement(_JSXStyle, {
      id: "3163060161"
    }, ["div.jsx-3163060161{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;position:relative;color:inherit;white-space:nowrap;}"]));
  }

}

DropdownButton.defaultProps = {
  dataTest: 'dhis2-uicore-dropdownbutton'
};
DropdownButton.propTypes = {
  /** Children to render inside the buton */
  children: PropTypes.node,
  className: PropTypes.string,

  /** Component to show/hide when button is clicked */
  component: PropTypes.element,
  dataTest: PropTypes.string,

  /** Button variant. Mutually exclusive with `primary` and `secondary` props */
  destructive: sharedPropTypes.buttonVariantPropType,

  /** Make the button non-interactive */
  disabled: PropTypes.bool,
  icon: PropTypes.element,

  /** Grants button initial focus on the page */
  initialFocus: PropTypes.bool,

  /** Button size. Mutually exclusive with `small` prop */
  large: sharedPropTypes.sizePropType,
  name: PropTypes.string,

  /** Button variant. Mutually exclusive with `destructive` and `secondary` props */
  primary: sharedPropTypes.buttonVariantPropType,

  /** Button variant. Mutually exclusive with `primary` and `destructive` props */
  secondary: sharedPropTypes.buttonVariantPropType,

  /** Button size. Mutually exclusive with `large` prop */
  small: sharedPropTypes.sizePropType,
  tabIndex: PropTypes.string,

  /** Type of button. Can take advantage of different default behavior */
  type: PropTypes.oneOf(['submit', 'reset', 'button']),
  value: PropTypes.string,

  /**
   * Callback triggered on click.
   * Called with signature `({ name: string, value: string, open: bool }, event)`
   */
  onClick: PropTypes.func
};
export { DropdownButton };