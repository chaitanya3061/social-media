import _JSXStyle from "styled-jsx/style";
import { colors, spacers, theme } from '@dhis2/ui-constants';
import cx from 'classnames';
import { PropTypes } from 'prop-types';
import React from 'react';
/**
A segmented control is used to select between options that relate to another
area of content. All of the options in a segmented control should be closely related.

Do not use a segmented control as a standalone selection, it should always be
used as a selector for other content. For example, do not use a segmented
control in place of radio buttons when making a single, standalone choice.

See specification: [Design System](https://github.com/dhis2/design-system/blob/master/molecules/segmented-control.md)

```js
import { SegmentedControl } from '@dhis2/ui'
```
*/

export const SegmentedControl = ({
  options,
  selected,
  onChange
}) => {
  if (!options.map(({
    value
  }) => value).includes(selected)) {
    const message = `There is no option with the value: "${selected}". ` + 'Make sure that the value passed to the selected ' + 'prop matches the value of an existing option.';
    throw new Error(message);
  }

  return /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["1782675663", [colors.grey400, colors.grey050, colors.grey600, spacers.dp8, spacers.dp16, theme.focus, colors.grey100, colors.grey700, colors.teal800, colors.teal600, colors.teal700]]]) + " " + "segmented-control"
  }, options.map(({
    label,
    value,
    disabled
  }) => /*#__PURE__*/React.createElement("button", {
    key: label,
    type: "button",
    onClick: e => onChange({
      value
    }, e),
    disabled: disabled,
    className: _JSXStyle.dynamic([["1782675663", [colors.grey400, colors.grey050, colors.grey600, spacers.dp8, spacers.dp16, theme.focus, colors.grey100, colors.grey700, colors.teal800, colors.teal600, colors.teal700]]]) + " " + (cx('segment', {
      selected: value === selected,
      disabled
    }) || "")
  }, label)), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "1782675663",
    dynamic: [colors.grey400, colors.grey050, colors.grey600, spacers.dp8, spacers.dp16, theme.focus, colors.grey100, colors.grey700, colors.teal800, colors.teal600, colors.teal700]
  }, [".segmented-control.__jsx-style-dynamic-selector{position:relative;z-index:0;}", `.segment.__jsx-style-dynamic-selector{all:unset;box-sizing:border-box;display:inline-block;position:relative;cursor:pointer;font-size:14px;text-align:center;border:1px solid ${colors.grey400};border-right-width:0;background:${colors.grey050};color:${colors.grey600};min-width:72px;max-width:320px;padding:${spacers.dp8} ${spacers.dp16};}`, `.segment.__jsx-style-dynamic-selector:focus{outline:3px solid ${theme.focus};outline-offset:-3px;}`, ".segment.__jsx-style-dynamic-selector:focus.__jsx-style-dynamic-selector:not(:focus-visible){outline:none;}", `.segment.__jsx-style-dynamic-selector:not(.selected):hover,.segment.__jsx-style-dynamic-selector:not(.selected):focus{background:${colors.grey100};color:${colors.grey700};}`, ".segment.__jsx-style-dynamic-selector:first-of-type{border-radius:3px 0 0 3px;}", ".segment.__jsx-style-dynamic-selector:last-of-type{border-right-width:1px;border-radius:0 3px 3px 0;}", `.segment.selected.__jsx-style-dynamic-selector{cursor:default;font-weight:600;border:1px solid ${colors.teal800};background:${colors.teal600};color:white;}`, ".segment.selected.__jsx-style-dynamic-selector:not(:last-of-type){z-index:1;margin-right:-1px;}", `.segment.selected.__jsx-style-dynamic-selector:focus{background:${colors.teal700};}`, ".segment.disabled.__jsx-style-dynamic-selector{cursor:not-allowed;opacity:0.5;}"]));
};
SegmentedControl.propTypes = {
  /** Options to populate the segmented control */
  options: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired,
    disabled: PropTypes.bool
  })).isRequired,

  /** An option to select; should match the `value` property of the option to be selected */
  selected: PropTypes.string.isRequired,

  /** Called with the signature `({ value: string }, event)` */
  onChange: PropTypes.func.isRequired
};