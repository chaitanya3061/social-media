function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { shallow } from 'enzyme';
import React from 'react';
import * as mockPagers from '../__fixtures__/index.js';
import { PageSelect } from '../page-select.js';
import { PageSizeSelect } from '../page-size-select.js';
import { Pagination } from '../pagination.js';
describe('<Pagination />', () => {
  const props = { ...mockPagers.atTenthPage,
    onPageChange: () => {},
    onPageSizeChange: () => {}
  };
  it('renders without errors', () => {
    shallow( /*#__PURE__*/React.createElement(Pagination, props));
  });
  it('renders a PageSelect and PageSizeSelect by default', () => {
    const wrapper = shallow( /*#__PURE__*/React.createElement(Pagination, props));
    expect(wrapper.find(PageSelect).length).toEqual(1);
    expect(wrapper.find(PageSizeSelect).length).toEqual(1);
  });
  it('renders without a PageSelect when hidePageSelect is true', () => {
    const wrapper = shallow( /*#__PURE__*/React.createElement(Pagination, _extends({}, props, {
      hidePageSelect: true
    })));
    expect(wrapper.find(PageSelect).length).toEqual(0);
    expect(wrapper.find(PageSizeSelect).length).toEqual(1);
  });
  it('renders without a PageSizeSelect when hidePageSizeSelect is true', () => {
    const wrapper = shallow( /*#__PURE__*/React.createElement(Pagination, _extends({}, props, {
      hidePageSizeSelect: true
    })));
    expect(wrapper.find(PageSelect).length).toEqual(1);
    expect(wrapper.find(PageSizeSelect).length).toEqual(0);
  });
  it('renders without PageSelect and PageSizeSelect when both are true', () => {
    const wrapper = shallow( /*#__PURE__*/React.createElement(Pagination, _extends({}, props, {
      hidePageSelect: true,
      hidePageSizeSelect: true
    })));
    expect(wrapper.find(PageSelect).length).toEqual(0);
    expect(wrapper.find(PageSizeSelect).length).toEqual(0);
  });
});