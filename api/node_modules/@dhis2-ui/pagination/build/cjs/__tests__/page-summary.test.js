"use strict";

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var mockPagers = _interopRequireWildcard(require("../__fixtures__/index.js"));

var _pageSummary = require("../page-summary.js");

var _pagination = require("../pagination.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

describe('<PageSummary />', () => {
  const props = {
    dataTest: 'test',
    pageSummaryText: _pagination.Pagination.defaultProps.pageSummaryText
  };
  it('renders without errors', () => {
    (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_pageSummary.PageSummary, _extends({}, props, mockPagers.atTenthPage)));
  });
  it('displays the correct information for a first page', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_pageSummary.PageSummary, _extends({}, props, mockPagers.atFirstPage)));
    const expectedString = 'Page 1 of 21, items 1-50 of 1035';
    expect(wrapper.find('span').text()).toEqual(expectedString);
  });
  it('displays the correct information for a last page', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_pageSummary.PageSummary, _extends({}, props, mockPagers.atLastPage)));
    const expectedString = 'Page 21 of 21, items 1001-1035 of 1035';
    expect(wrapper.find('span').text()).toEqual(expectedString);
  });
  it('displays the correct information for a page between first and last', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_pageSummary.PageSummary, _extends({}, props, mockPagers.atTenthPage)));
    const expectedString = 'Page 10 of 21, items 451-500 of 1035';
    expect(wrapper.find('span').text()).toEqual(expectedString);
  });
  describe('getItemRange', () => {
    it('calculates the firstItem and lastItem correctly', () => {
      const {
        page,
        pageSize,
        total
      } = mockPagers.atTenthPage;
      const {
        firstItem,
        lastItem
      } = (0, _pageSummary.getItemRange)(page, pageSize, total);
      expect(firstItem).toEqual(451);
      expect(lastItem).toEqual(500);
    });
    it('returns 0 for firstItem and lastItem if the total is 0', () => {
      const {
        firstItem,
        lastItem
      } = (0, _pageSummary.getItemRange)(1, 50, 0);
      expect(firstItem).toEqual(0);
      expect(lastItem).toEqual(0);
    });
    it('uses the total count as lastItem when the last page is reached', () => {
      const {
        page,
        pageSize,
        total
      } = mockPagers.atLastPage;
      const {
        lastItem
      } = (0, _pageSummary.getItemRange)(page, pageSize, total);
      expect(lastItem).toEqual(total);
    });
  });
});