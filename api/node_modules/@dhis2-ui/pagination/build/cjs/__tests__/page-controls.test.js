"use strict";

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var mockPagers = _interopRequireWildcard(require("../__fixtures__/index.js"));

var _pageControls = require("../page-controls.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

describe('<PageControls />', () => {
  const mockOnClick = jest.fn();
  const props = {
    dataTest: 'test',
    onClick: mockOnClick,
    nextPageText: 'Next',
    previousPageText: 'Previous',
    ...mockPagers.atTenthPage
  };
  beforeEach(() => {
    mockOnClick.mockClear();
  });
  it('renders without errors', () => {
    (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_pageControls.PageControls, props));
  });
  it('disables no buttons on a page between first and last', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_pageControls.PageControls, props));
    expect(wrapper.find('.button-previous').getElement().props.disabled).toEqual(false);
    expect(wrapper.find('.button-next').getElement().props.disabled).toEqual(false);
  });
  it('disables the previous page button on the first page', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_pageControls.PageControls, _extends({}, props, mockPagers.atFirstPage)));
    expect(wrapper.find('.button-previous').getElement().props.disabled).toEqual(true);
    expect(wrapper.find('.button-next').getElement().props.disabled).toEqual(false);
  });
  it('disables the next page button on the last page', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_pageControls.PageControls, _extends({}, props, mockPagers.atLastPage)));
    expect(wrapper.find('.button-previous').getElement().props.disabled).toEqual(false);
    expect(wrapper.find('.button-next').getElement().props.disabled).toEqual(true);
  });
  it('calls the onClick handler with the value for the next page when next is clicked', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_pageControls.PageControls, props));
    wrapper.find('.button-next').simulate('click');
    expect(mockOnClick).toHaveBeenCalledTimes(1);
    expect(mockOnClick).toHaveBeenCalledWith(11);
  });
  it('calls the onClick handler with the value for the previous page when previous is clicked', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_pageControls.PageControls, props));
    wrapper.find('.button-previous').simulate('click');
    expect(mockOnClick).toHaveBeenCalledTimes(1);
    expect(mockOnClick).toHaveBeenCalledWith(9);
  });
});