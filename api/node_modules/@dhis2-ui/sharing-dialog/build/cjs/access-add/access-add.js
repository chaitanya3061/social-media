"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccessAdd = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _button = require("@dhis2-ui/button");

var _select = require("@dhis2-ui/select");

var _appRuntime = require("@dhis2/app-runtime");

var _uiConstants = require("@dhis2/ui-constants");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _index = require("../autocomplete/index.js");

var _constants = require("../constants.js");

var _index2 = require("../fetching-context/index.js");

var _index3 = _interopRequireDefault(require("../locales/index.js"));

var _index4 = require("../text/index.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const AccessAdd = ({
  onAdd
}) => {
  const isFetching = (0, _react.useContext)(_index2.FetchingContext);
  const [entity, setEntity] = (0, _react.useState)(null);
  const [access, setAccess] = (0, _react.useState)('');
  const {
    offline
  } = (0, _appRuntime.useOnlineStatus)();

  const onSubmit = e => {
    e.preventDefault();
    onAdd({
      type: entity.type,
      id: entity.id,
      name: entity.displayName || entity.name,
      access
    });
    setEntity(null);
    setAccess('');
  };

  const accessOptions = [{
    value: _constants.ACCESS_VIEW_ONLY,
    label: _index3.default.t('View only')
  }, {
    value: _constants.ACCESS_VIEW_AND_EDIT,
    label: _index3.default.t('View and edit')
  }];
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_index4.Title, null, _index3.default.t('Give access to a user or group')), /*#__PURE__*/_react.default.createElement("form", {
    onSubmit: onSubmit,
    className: _style.default.dynamic([["813696200", [_uiConstants.colors.grey100, _uiConstants.colors.grey900]]])
  }, /*#__PURE__*/_react.default.createElement(_index.SharingAutocomplete, {
    selected: (entity === null || entity === void 0 ? void 0 : entity.displayName) || (entity === null || entity === void 0 ? void 0 : entity.name),
    onSelection: setEntity
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: _style.default.dynamic([["813696200", [_uiConstants.colors.grey100, _uiConstants.colors.grey900]]]) + " " + "select-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_select.SingleSelectField, {
    label: _index3.default.t('Access level'),
    placeholder: _index3.default.t('Select a level'),
    disabled: offline,
    selected: access,
    helpText: offline ? _index3.default.t('Not available offline') : '',
    onChange: ({
      selected
    }) => setAccess(selected)
  }, accessOptions.map(({
    value,
    label
  }) => /*#__PURE__*/_react.default.createElement(_select.SingleSelectOption, {
    key: value,
    label: label,
    value: value,
    active: value === access
  })))), /*#__PURE__*/_react.default.createElement(_button.Button, {
    type: "submit",
    disabled: offline || isFetching || !entity || !access
  }, _index3.default.t('Give access'))), /*#__PURE__*/_react.default.createElement(_style.default, {
    id: "813696200",
    dynamic: [_uiConstants.colors.grey100, _uiConstants.colors.grey900]
  }, [`form.__jsx-style-dynamic-selector{background-color:${_uiConstants.colors.grey100};color:${_uiConstants.colors.grey900};margin-bottom:21px;padding:8px 12px;border-radius:5px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-end;-webkit-box-align:flex-end;-ms-flex-align:flex-end;align-items:flex-end;}`, ".select-wrapper.__jsx-style-dynamic-selector{-webkit-flex:1;-ms-flex:1;flex:1;}"]));
};

exports.AccessAdd = AccessAdd;
AccessAdd.propTypes = {
  onAdd: _propTypes.default.func.isRequired
};